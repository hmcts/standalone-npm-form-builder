{"version":3,"file":"example-npm-module.js.map","sources":["ng://example-npm-module/lib/hmcts-form-builder.service.ts","ng://example-npm-module/lib/hmcts-form-builder.component.ts","ng://example-npm-module/lib/services/form-builder-validation.service.ts","ng://example-npm-module/lib/services/form-builder.service.ts","ng://example-npm-module/lib/components/form-builder/from-builder.component.ts","ng://example-npm-module/lib/components/fieldset/fieldset.component.ts","ng://example-npm-module/lib/components/jui-form-elements/jui-form-elements.component.ts","ng://example-npm-module/lib/components/legend/legend.component.ts","ng://example-npm-module/lib/components/hint/hint.component.ts","ng://example-npm-module/lib/components/date/date.component.ts","ng://example-npm-module/lib/components/inputs/inputs.component.ts","ng://example-npm-module/lib/components/radiobutton/radiobutton.component.ts","ng://example-npm-module/lib/components/checkbox/checkbox.component.ts","ng://example-npm-module/lib/components/textareas/textareas.component.ts","ng://example-npm-module/lib/components/buttons/buttons.component.ts","ng://example-npm-module/lib/components/label/label.component.ts","ng://example-npm-module/lib/components/hidden-input/hidden-input.component.ts","ng://example-npm-module/lib/components/validation-header/validation-header.component.ts","ng://example-npm-module/lib/components/validation-error-formcontrol/validation-error-formcontrol.component.ts","ng://example-npm-module/lib/components/validation-error-formgroup/validation-error-formgroup.component.ts","ng://example-npm-module/lib/hmcts-form-builder.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HmctsFormBuilderService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hmcts-hmcts-form-builder',\n  template: `\n    <p>\n      hmcts-form-builder works!\n    </p>\n  `,\n  styles: []\n})\nexport class HmctsFormBuilderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import {Injectable} from '@angular/core';\r\nimport {AbstractControl, Form, FormGroup} from '@angular/forms';\r\nimport {Validators, ValidationErrors, ValidatorFn} from '@angular/forms';\r\nimport {DatePipe} from '@angular/common';\r\nimport {controlsisTextAreaValidWhenCheckboxChecked, controlsRadioConditionalModel, FormGroupValidator} from './form-group-validation.typescript';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationService {\r\n\r\n  // FOR SINGLE CONTROLS - formGroup.control level validation\r\n  /**\r\n   * Custom validators can be added to this.\r\n   *\r\n   * TODO : Define interface for array.\r\n   * TODO : Add a Custom Validator example.\r\n   *\r\n   * @see https://angular.io/guide/form-validation#custom-validators\r\n   */\r\n  ngValidatorFunctionMap: Array<any> = [\r\n    {\r\n      simpleName: 'required',\r\n      ngValidatorFunction: Validators.required\r\n    },\r\n    {\r\n      simpleName: 'email',\r\n      ngValidatorFunction: Validators.email\r\n    }\r\n  ];\r\n\r\n\r\n  constructor(private datePipe: DatePipe) {\r\n  }\r\n\r\n  /**\r\n   * Returns a map of how we've mapped simple names to Ng Validators, and in the future custom validators.\r\n   *\r\n   * TODO: Check return in Unit test.\r\n   *\r\n   * // @returnArray\r\n   */\r\n  getNgValidationFunctionMap() {\r\n    return this.ngValidatorFunctionMap;\r\n  }\r\n\r\n  /**\r\n   * Takes in an array of simple validation names.\r\n   *\r\n   * These names map to Ng Validation functions, and can map to more complex custom validation functions.\r\n   *\r\n   * This allows us to leverage the power of Ng Validation, and custom validation, as well as giving us\r\n   * the ability to create reusable validators, that can be used throughout our forms.\r\n   *\r\n   * Note: Validators.minLength requires Validators.required\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * @see state_meta\r\n   * // @param validators - ie. ['required', 'email']\r\n   */\r\n  getNgValidators(validators: Array<string>): any[] {\r\n\r\n    const ngValidators: Array<any> = [];\r\n\r\n    validators.forEach((validatorName) => {\r\n      for (const ngValidatorFunction of this.getNgValidationFunctionMap()) {\r\n        if (ngValidatorFunction.simpleName === validatorName) {\r\n          ngValidators.push(ngValidatorFunction.ngValidatorFunction);\r\n        }\r\n      }\r\n    });\r\n\r\n    return ngValidators;\r\n  }\r\n\r\n  /**\r\n   * Checks if validators have been set on the control, an example of a validator being set on a control is:\r\n   *\r\n   * {\r\n     *  control: 'informationNeeded',\r\n     *  value: 'Information text',\r\n     *  validators: ['required']\r\n     * }\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * //@param {Array} validators - ['required']\r\n   * //@return {boolean}\r\n   */\r\n  controlHasValidation(validators: Array<string>): boolean {\r\n\r\n    return validators && validators.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the control is valid.\r\n   *\r\n   * Returns a boolean, based on if the control which is part\r\n   * of a form group is valid or not.\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * // @param {FormGroup} formGroup\r\n   * // @param {String} control - 'informationNeeded'\r\n   * // @return {boolean}\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n\r\n    return formGroup.get(control).valid;\r\n  }\r\n\r\n  // FOR MULTIPLY CONTROLS - formGroup level validation.\r\n  /**\r\n   * Is Form Group Invalid\r\n   *\r\n   * Checks if a validation error has been thrown on the pages Angular FormGroup.\r\n   *\r\n   * FormGroup is a the parent of FormControls, and therefore and according to the Angular\r\n   * Docs the best place to validate against multiply controls, that have dependencies upon one\r\n   * another is on the FormGroup level.\r\n   *\r\n   * An example being; we should check if a user has checked one of eight checkboxes.\r\n   *\r\n   * TODO : Unit Test\r\n   *\r\n   * @see ValidationService\r\n   * // @param {FormGroup} formGroup\r\n   * // @param {string} validationErrorId - ie. 'reasonsConstentOrderNotApproved' - This is the validation identifier\r\n   * we assign to a group of form controls, we assign this when we currently setValidators(), note that we will\r\n   * need to pass this in once the Universal Form Builder is merged with Validation.\r\n   * // @return{boolean}\r\n   */\r\n  isFormGroupInvalid(formGroup: any, validationErrorId: string): boolean {\r\n    if (formGroup.errors && formGroup.errors.hasOwnProperty(validationErrorId)) {\r\n      return formGroup.errors[validationErrorId];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * isAnyCheckboxChecked\r\n   *\r\n   * Checks if any of the checkbox controls passed to this function are checked ie. have a boolean value\r\n   * of true.\r\n   *\r\n   * This is due to the fact that we might have multiply checkboxes within the view, and the user needs to\r\n   * select at least one of these checkboxes to have entered a valid input.\r\n   *\r\n   * Note that we validate on the formGroup level, and not the control level for this as we are concerned with\r\n   * multiple controls and the Ng 6 way is to have the validator on a common ancestor of controls; in this\r\n   * case our formGroup.\r\n   *\r\n   * If the user has checked a checked box this function returns null and therefore no validation error is returned.\r\n   * If the user has NOT checked a checkbox this function returns a validation error.\r\n   *\r\n   * // @param formGroup\r\n   * // @param {string} validationIdentifier - An error name assigned by the developer, this name can then be referred\r\n   * to display the error in the  view.\r\n   * // @return{any}\r\n   */\r\n  isAnyCheckboxChecked(formGroup: FormGroup, checkboxes: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isAnyCheckboxCheckedValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n\r\n      for (const checkbox of checkboxes) {\r\n        if (controls.get(checkbox).value === true) {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n    };\r\n\r\n    return isAnyCheckboxCheckedValidationFn;\r\n  }\r\n\r\n\r\n  // Common function for validator\r\n  // Returninng the validationIdentifier true if invalid and null if valid\r\n\r\n  isAllFieldsRequiredValidationFn(controls: FormGroup, fields: Array<string>, validationIdentifier){\r\n    if (controls !== null && fields !== null) {\r\n      for (const field of fields) {\r\n        if (!controls.get(field).value) {\r\n          return {\r\n            [validationIdentifier]: true\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * isAllFieldsRequired\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * // @param validationIdentifier\r\n   * // @return{any}\r\n   */\r\n\r\n  isAllFieldsRequired(formGroup: FormGroup, fields: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isAllFieldsRequiredValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n      return this.isAllFieldsRequiredValidationFn(controls, fields, validationIdentifier);\r\n    };\r\n    return isAllFieldsRequiredValidationFn;\r\n  }\r\n\r\n  /** Common function for date validator\r\n   * Returninng the validationIdentifier true if invalid and null if valid\r\n   *\r\n   * yyyy/mm/dd\r\n   *\r\n   */\r\n\r\n\r\n  isValidDateValidationFn(controls: FormGroup, fields: Array<string>, validationIdentifier){\r\n\r\n    if (controls !== null && fields !== null) {\r\n      const dateValueArray = [];\r\n\r\n      for (const field of fields) {\r\n\r\n        if (!controls.get(field).value) {\r\n          return {\r\n            [validationIdentifier]: true\r\n          };\r\n        } else {\r\n\r\n          // Form have valid values and we can create date\r\n          // Check is form controls matching the right lengh and then create array contained date\r\n\r\n          if (controls.get(field).value.length <= 2) {\r\n            dateValueArray.push(controls.get(field).value);\r\n          } else if  (controls.get(field).value.length === 4) {\r\n            dateValueArray.push(controls.get(field).value);\r\n          } else {\r\n            return {\r\n              [validationIdentifier]: true\r\n            };\r\n          }\r\n\r\n          // Check if array is ready and convert to string\r\n\r\n          if (dateValueArray.length === 3){\r\n\r\n            //Return error if not numbers\r\n            for (const element of dateValueArray) {\r\n              if (element != Number(element)) {\r\n                return {\r\n                  [validationIdentifier]: true\r\n                };\r\n              }\r\n            }\r\n\r\n            // Convert user entered day and month to numbers\r\n            dateValueArray[1] = Number(dateValueArray[1]);\r\n            dateValueArray[2] = Number(dateValueArray[2]);\r\n\r\n            // Return error if user entered months less than 0 and more than 12\r\n            if (dateValueArray[1] <= 0 || dateValueArray[1] >= 12) {\r\n              return {\r\n                [validationIdentifier]: true\r\n              };\r\n            }\r\n            // Return error if user entered months less than 0 and more than 31\r\n            if (dateValueArray[2] <= 0 || dateValueArray[2] >= 31) {\r\n              return {\r\n                [validationIdentifier]: true\r\n              };\r\n            }\r\n\r\n            // Here value might me invalid\r\n\r\n            // Adding zeros in front if less than 10\r\n            if (dateValueArray[1] < 10) { dateValueArray[1] = (\"0\" + (dateValueArray[1]).toString().slice(-2)); }\r\n            if (dateValueArray[2] < 10) { dateValueArray[2] = (\"0\" + (dateValueArray[2]).toString().slice(-2)); }\r\n\r\n            // Get proper date format by create Date object and convert it back to string for comparison with what the user entered\r\n\r\n            const dateStr = dateValueArray.toString();\r\n\r\n            const dateObj = new Date(dateStr);\r\n            const checkDateStr = dateObj.toISOString().slice(0, 10).replace(/-/g, \",\").replace(\"T\", \" \");\r\n\r\n            // Return null if valid date\r\n            if (checkDateStr === dateStr) {\r\n              return null;\r\n            }\r\n\r\n            return {\r\n              [validationIdentifier]: true\r\n            };\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isValidDate(formGroup: FormGroup, fields: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isValidDateValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n      return this.isValidDateValidationFn(controls, fields, validationIdentifier);\r\n    };\r\n\r\n    return isValidDateValidationFn;\r\n  }\r\n\r\n  /**\r\n   * isTextAreaValidWhenCheckboxChecked\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * { checkboxControl : string, textareaControl : string }\r\n   * // @param validationIdentifier\r\n   * //@return {any}\r\n   */\r\n\r\n  isTextAreaValidWhenCheckboxChecked(formGroup: FormGroup, controls: controlsisTextAreaValidWhenCheckboxChecked, validationIdentifier: string) {\r\n\r\n\r\n    const isTextAreaValidWhenCheckboxChecked: ValidatorFn = (formControls: FormGroup): ValidationErrors | null => {\r\n\r\n      if (!formControls.get(controls.checkboxControl).value) {\r\n        return null;\r\n      }\r\n\r\n      if (formControls.get(controls.textareaControl).value && formControls.get(controls.textareaControl).value.length > 0) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n    };\r\n\r\n    return isTextAreaValidWhenCheckboxChecked;\r\n  }\r\n\r\n  /**\r\n   * isRadioValidWhenSomeOptionSelected\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * { checkboxControl : string, textareaControl : string }\r\n   * // @param validationIdentifier\r\n   * // @return {any}\r\n   */\r\n\r\n  isRadioValidWhenSomeOptionSelected(formGroup: FormGroup, controls: any, validationIdentifier: string){\r\n\r\n    const isRadioValidWhenSomeOptionSelected: ValidatorFn = (formControls: FormGroup): ValidationErrors | null => {\r\n\r\n      for (const option of controls.selectedOptions) {\r\n        if (formControls.get(controls.radioControl).value !== null && formControls.get(controls.radioControl).value !== option.selectedOption) {\r\n\r\n          // Do not validate child if parent is valid so\r\n          // Reset child validation to valid state here\r\n          // Add word \"ValidationFn\" to the name of validator when you extend child validation functions\r\n\r\n          if (option.childValidator.validatorFunc) {\r\n            return  this[option.childValidator.validatorFunc + \"ValidationFn\"](null, null, option.childValidator.validationErrorId);\r\n          }\r\n\r\n          return null;\r\n\r\n        } else {\r\n          if (option.childValidator.validatorFunc){\r\n            return this[option.childValidator.validatorFunc + \"ValidationFn\"](formGroup, option.childValidator.controls, option.childValidator.validationErrorId);\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n\r\n    };\r\n\r\n    return isRadioValidWhenSomeOptionSelected;\r\n  }\r\n\r\n  /**\r\n   * createFormGroupValidators\r\n   *\r\n   * FormGroup Validators are used for validation that involves more than one FormControl. ie. When a control\r\n   * depends on another, or we need to validate a group of controls together. Validation for multiply controls is\r\n   * required on the common ancestor as per the Angular Documentation.\r\n   *\r\n   * @see @see https://angular.io/guide/form-validation#adding-to-reactive-forms-1\r\n   *\r\n   * // @param {FormGroup} formGroup - Angular FormGroup\r\n   * // @param formGroupValidators - [{\r\n     *    validatorFunc: 'isAnyCheckboxChecked',\r\n     *    validationErrorId: 'reasonsConstentOrderNotApproved',\r\n     *    checkboxes: [\r\n     *        'partiesNeedAttend', 'NotEnoughInformation', 'orderNotAppearOfS25ca1973', 'd81',\r\n     *        'pensionAnnex', 'applicantTakenAdvice', 'respondentTakenAdvice', 'Other2'\r\n     *    ]}]\r\n   */\r\n  createFormGroupValidators(formGroup: FormGroup, formGroupValidators) {\r\n\r\n    return formGroupValidators.map(formGroupValidator => {\r\n\r\n      const groupValidator: FormGroupValidator = formGroupValidator;\r\n\r\n      return this.createFormGroupValidator(formGroup, groupValidator.validatorFunc, groupValidator.controls,\r\n        groupValidator.validationErrorId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * createFormGroupValidator\r\n   *\r\n   * You'll need to pass in the name of the validator function that you wish to use.\r\n   *\r\n   * @see state_meta.js\r\n   *\r\n   * // @param formGroup\r\n   * // @param {String} validatorFunc - 'isAnyCheckboxChecked'\r\n   * // @param {Array or Object} controls - ['partiesNeedAttend', 'NotEnoughInformation'] or { checkbox: 'controlName', textarea: 'controlName' }\r\n   * // @param {String} validationErrorId - 'reasonsConstentOrderNotApproved'\r\n   *\r\n   * // @return {ValidatorFn}\r\n   */\r\n  createFormGroupValidator(formGroup: FormGroup, validatorFunc: string, controls: any, validationErrorId: string): ValidatorFn {\r\n\r\n    return this[validatorFunc](formGroup, controls, validationErrorId);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\r\nimport {ValidationService} from './form-builder-validation.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormsService {\r\n  FormControls = [];\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  /**\r\n   * Creation of FormControls for a FormGroup.\r\n   * So first thing is how do we add Validation to a FormControl\r\n   *\r\n   * prop can be a fieldset, legend, text, idPrefix, name, header, checkboxes, if we\r\n   *\r\n   * Here is where the validation is applied to each of the controls of the form, based on the validators that\r\n   * have been plaed into the state_meta.js.\r\n   *\r\n   * TODO: Name this something totally different, as create doesn't really explain what it does,\r\n   * also there it's quite hard to work out.\r\n   *\r\n   * @param someJson\r\n   * @param someData\r\n   */\r\n  create(someJson, someData) {\r\n    if (typeof someJson === 'object') {\r\n      for (const prop in someJson) {\r\n\r\n        if (prop === 'control') {\r\n          if (someJson.radioGroup !== undefined) {\r\n            // RadioButton Logic\r\n            if (Object.keys(someData).length !== 0) {\r\n              for (const radioEl of someJson.radioGroup) {\r\n                if (radioEl.value === someData[someJson.control]) {\r\n                  this.FormControls[someJson.control] = new FormControl(radioEl.value);\r\n                  break;\r\n                } else {\r\n                  this.createFormControl(null, someJson.control, someJson.validators);\r\n                }\r\n              }\r\n            } else {\r\n              this.FormControls[someJson.control] = new FormControl();\r\n            }\r\n          } else {\r\n            if (someData[someJson.control]) {\r\n\r\n              this.FormControls[someJson.control] = new FormControl(someData[someJson.control]);\r\n            } else {\r\n              this.createFormControl(someJson.value, someJson.control, someJson.validators);\r\n            }\r\n          }\r\n        }\r\n        this.create(someJson[prop], someData);\r\n      }\r\n    }\r\n    if (someJson !== undefined && someJson.isArray) {\r\n\r\n      for (const item  of someJson) {\r\n        this.create(someJson[item], someData);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Creates a new `FormControl` instance.\r\n   * @param controlName - 'informationNeeded'\r\n   * @param initialValue - ie. text if it's a textarea.\r\n   */\r\n  createFormControl(initialValue: any, controlName: string, validators: Array<string>) {\r\n\r\n    if (this.validationService.controlHasValidation(validators)) {\r\n      this.FormControls[controlName] = new FormControl(initialValue, this.validationService.getNgValidators(validators));\r\n      return;\r\n    }\r\n\r\n    this.FormControls[controlName] = new FormControl(initialValue);\r\n  }\r\n\r\n  defineformControls(someJson: any, someData: any): any {\r\n    this.FormControls = [];\r\n    this.create(someJson, someData);\r\n    return this.FormControls;\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {FormsService} from '../../services/form-builder.service';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n/**\r\n * Form Builder Wrapper\r\n * Component accepts pageItems and pageValues for From Builder to process\r\n * and it emits form data to it's parent component.\r\n */\r\n\r\n@Component({\r\n  selector: 'app-form-builder',\r\n  template: `<ng-container *ngIf=\"isPageValid && formDraft.invalid\">\r\n  <app-validation-header [validationHeaderErrorMessages]=\"this.pageItems.validationHeaderErrorMessages\" [formGroup]=\"formDraft\">\r\n  </app-validation-header>\r\n</ng-container>\r\n\r\n<form *ngIf=\"pageItems\" [formGroup]=\"formDraft\" (ngSubmit)=\"onFormSubmit()\">\r\n  <div [ngClass]=\"{'govuk-form-group':true, 'govuk-form-group--error' : isPageValid && formDraft.invalid }\">\r\n    <h1 class=\"govuk-heading-xl\">\r\n      <span *ngIf=\"pageItems.caption\" [class]=\"pageItems.caption.classes\">{{ pageItems.caption.text }}</span>\r\n      {{pageItems.header}}\r\n    </h1>\r\n    <div class=\"govuk-form-group\" *ngFor=\"let group of pageItems.groups\">\r\n      <app-fieldset *ngIf=\"group.fieldset\"\r\n                    [classes]=\"'govuk-fieldset'\"\r\n                    [group]=\"formDraft\"\r\n                    [data]=\"group.fieldset\"\r\n                    [validate]=\"isPageValid\">\r\n      </app-fieldset>\r\n      <app-jui-form-elements [group]=\"formDraft\" [validate]=\"isPageValid\" [data]=\"group\"></app-jui-form-elements>\r\n    </div>\r\n  </div>\r\n</form>\r\n`\r\n})\r\n\r\nexport class FromBuilderComponent implements OnChanges {\r\n\r\n  constructor(\r\n    private formsService: FormsService,\r\n    private validationService: ValidationService) {}\r\n\r\n  @Input() pageItems: any;\r\n  @Input() pageValues: any;\r\n  @Input() isPageValid: boolean;\r\n  @Output() submitPage = new EventEmitter<FormGroup>();\r\n\r\n  formDraft: FormGroup;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.pageItems && changes.pageItems.currentValue) {\r\n      this.createForm();\r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.formDraft = new FormGroup(this.formsService.defineformControls(this.pageItems, this.pageValues));\r\n    this.setValidators();\r\n  }\r\n\r\n  setValidators(): void {\r\n    if (this.pageItems) {\r\n      const formGroupValidators = this.validationService.createFormGroupValidators(this.formDraft, this.pageItems.formGroupValidators);\r\n      this.formDraft.setValidators(formGroupValidators);\r\n    }\r\n  }\r\n\r\n  onFormSubmit() {\r\n    this.submitPage.emit(this.formDraft);\r\n  }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-fieldset',\r\n  template: `<fieldset [attr.validate]=\"validate\" [class]=\"classes\" [attr.data]=\"data\" [attr.group]=\"group\">\r\n    <ng-container *ngFor=\"let item of data\">\r\n        <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"item\"></app-jui-form-elements>\r\n    </ng-container>\r\n    <ng-content></ng-content>\r\n</fieldset>\r\n`\r\n})\r\nexport class FieldsetComponent {\r\n    @Input() classes;\r\n    @Input() validate;\r\n    @Input() group;\r\n    @Input() data: Array<any>;\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-jui-form-elements',\r\n  template: `<div [attr.validate]=\"validate\" [attr.data]=\"data\" [attr.group]=\"group\">\r\n  <!--JUI FORM builder component -->\r\n  <app-legend *ngIf=\"data.legend\" [classes]=\"data.legend.classes\">\r\n    {{data.legend.text}}\r\n  </app-legend>\r\n  <app-hint *ngIf=\"data.hint\" [classes]=\"data.hint.classes\">\r\n    {{data.hint.text}}\r\n  </app-hint>\r\n  <ng-container *ngIf=\"data.validationError && validate\">\r\n    <app-validation-error-formgroup [group]=\"group\" [validationErrorId]=\"data.validationError.identifier\">\r\n      {{data.validationError.value}}\r\n    </app-validation-error-formgroup>\r\n  </ng-container>\r\n  <app-date *ngIf=\"data.date\"\r\n            [id]=\"data.date.formName\"\r\n            [data]=\"data.date\"\r\n            [group]=\"group\"\r\n            [validate]=\"validate\"\r\n            [validationError]=\"data.date.validationError\">\r\n  </app-date>\r\n  <app-inputs *ngIf=\"data.input\"\r\n              [item]=\"data.input\"\r\n              [showValidation]=\"validate\"\r\n              [validationError]=\"data.input.validationError\"\r\n              [group]=\"group\"\r\n              [hint]=\"data.input.hint\"\r\n              [label]=\"data.input.label\"\r\n              [labelFor]=\"data.input.control\"></app-inputs>\r\n  <app-radiobutton *ngIf=\"data.radios\" [classes]=\"'govuk-radios ' + data.radios.classes\"\r\n                   [items]=\"data.radios.radioGroup\"\r\n                   [group]=\"group\"\r\n                   [control]=\"data.radios.control\"\r\n                   [idPrefix]=\"data.radios.control\"\r\n                   [validate]=\"validate\"\r\n                   [showValidation]=\"validate\"\r\n                   [validationError]=\"data.radios.validationError\">\r\n  </app-radiobutton>\r\n  <div *ngIf=\"data.checkbox\" class=\"govuk-checkboxes\">\r\n    <app-checkbox [group]=\"group\"\r\n                  [validate]=\"validate\"\r\n                  [idPrefix]=\"data.checkbox.control\"\r\n                  [items]=\"data.checkbox\"\r\n                  [classes]=\"'govuk-checkboxes__item'\"\r\n                  [labelClasses]=\"'govuk-label govuk-checkboxes__label'\">\r\n      <div class=\"govuk-form-group\">\r\n        <div *ngIf=\"data.checkbox.groups && group.controls[data.checkbox.control].value\" class=\"govuk-checkboxes__conditional\"\r\n             [ngStyle] = \"{ 'border-left': (validate && group.invalid) ? '5px solid #b10e1e' : '' }\">\r\n          <ng-container  *ngFor=\"let subgroup of data.checkbox.groups\">\r\n            <app-fieldset *ngIf=\"subgroup.fieldset\"\r\n                          [validate]=\"validate\"\r\n                          [classes]=\"'govuk-fieldset'\"\r\n                          [group]=\"group\"\r\n                          [data]=\"subgroup.fieldset\"\r\n            >\r\n            </app-fieldset>\r\n            <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"subgroup\"></app-jui-form-elements>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </app-checkbox>\r\n  </div>\r\n\r\n  <app-textareas *ngIf=\"data.textarea\" [classes]=\"'govuk-textarea'\"\r\n                 [showValidation]=\"validate\"\r\n                 [validationError]=\"data.textarea.validationError\"\r\n                 [group]=\"group\"\r\n                 [control]=\"data.textarea.control\"\r\n                 [label]=\"data.textarea.label\"\r\n                 [labelFor]=\"data.textarea.control\"\r\n                 [rows]=\"5\">\r\n  </app-textareas>\r\n  <app-buttons *ngIf=\"data.button\"\r\n               [classes]=\"'govuk-button'\"\r\n               [typeBtn]=\"data.button.type\"\r\n               [group]=\"group\"\r\n               [control]=\"data.button.control\"\r\n               [value]=\"data.button.value\">\r\n  </app-buttons>\r\n  <!--JUI FORM builder component -->\r\n</div>\r\n`\r\n})\r\nexport class JuiFormElementsComponent{\r\n  @Input() group: FormGroup;\r\n  @Input() data;\r\n  @Input() validate;\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-legend',\r\n  template: `<legend [class]=\"'govuk-fieldset__legend ' + classes\">\r\n    <ng-content></ng-content>\r\n</legend>\r\n`\r\n})\r\nexport class LegendComponent {\r\n    @Input() classes:  string;\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-hint',\r\n  template: `<span [class]=\"classes\">\r\n    <ng-content></ng-content>\r\n</span>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class HintComponent {\r\n    @Input() classes;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-date',\r\n  template: `<ng-container>\r\n    <app-validation-error-formgroup *ngIf=\"data.validationError && validate\" [group]=\"group\" [validationErrorId]=\"data.validationError.identifier\">\r\n        {{data.validationError.value}}\r\n    </app-validation-error-formgroup>\r\n    <div class=\"govuk-date-input\" [id]=\"id\" [attr.data]=\"data\">\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.day.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.day.input.label\"\r\n                            [labelFor]=\"data.day.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.month.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.month.input.label\"\r\n                            [labelFor]=\"data.month.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.year.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.year.input.label\"\r\n                            [labelFor]=\"data.year.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n`\r\n})\r\nexport class DateComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() id;\r\n    @Input() data;\r\n    @Input() validate;\r\n    @Input() showValidation;\r\n    @Input() validationError;\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-inputs',\r\n  template: `<ng-container [formGroup]=\"group\">\r\n  <app-label [forElement]=\"labelFor\">{{label.text}}\r\n  </app-label>\r\n  <app-hint *ngIf=\"hint\" [classes]=\"hint.classes\">\r\n    {{hint.text}}\r\n  </app-hint>\r\n  <ng-container *ngIf=\"validationError\">\r\n    <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"item.control\" id=\"{{item.control}}\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <input [class]=\"'govuk-input ' + item.classes\"\r\n         [formControlName]=\"item.control\"\r\n         [id]=\"item.control\"\r\n         [name]=\"item.control\"\r\n         [ngClass]=\"{'govuk-input--error':isControlInvalidAndShowValidation(group, item.control, showValidation)}\"\r\n         type=\"text\">\r\n</ng-container>\r\n`\r\n})\r\nexport class InputsComponent {\r\n  @Input() group: FormGroup;\r\n  @Input() item;\r\n  @Input() label;\r\n  @Input() hint;\r\n  @Input() labelFor;\r\n  @Input() showValidation;\r\n  @Input() validationError;\r\n  name;\r\n  id;\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  /**\r\n   * showValidationAndIsControlValid\r\n   *\r\n   * Return true if this component is required to show it's validation, and the users input is invalid.\r\n   *\r\n   * //@param showValidation\r\n   * //@param formGroup\r\n   * //@param control\r\n   * //@return {boolean}\r\n   */\r\n  isControlInvalidAndShowValidation(formGroup: FormGroup, control: string, showValidation: boolean) {\r\n\r\n    return !this.isFormControlValid(formGroup, control) && showValidation;\r\n  }\r\n\r\n  /**\r\n   * Checks if this control is valid.\r\n   *\r\n   *  ValidationService\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n    return this.validationService.isFormControlValid(formGroup, control);\r\n  }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-radiobutton',\r\n  template: `<ng-container>\r\n  <ng-container *ngIf=\"validationError\">\r\n      <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"control\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <div [class]=\"classes\" [formGroup]=\"group\">\r\n      <ng-container *ngFor=\"let data of items; let i = index\">\r\n        <div *ngIf=\"data.devider\" class=\"govuk-radios__divider\">{{data.devider}}</div>\r\n        <div *ngIf=\"!data.devider\" class=\"govuk-radios__item\">\r\n            <input class=\"govuk-radios__input\" id=\"{{control + data.value}}\" [formControlName]=\"control\" type=\"radio\" [value]= \"data.value\">\r\n            <label class=\"govuk-label govuk-radios__label\" for=\"{{control + data.value}}\">\r\n                {{data.text}}\r\n            </label>\r\n            <ul *ngIf=\"data.list\" [class]=\"'govuk-list' + data.list.classes\">\r\n              <li *ngFor=\"let item of data.list.text\">{{ item }}</li>\r\n            </ul>\r\n            <app-hint *ngIf=\"data.hint\" [classes]=\"data.hint.classes\">\r\n                {{data.hint.text}}\r\n            </app-hint>\r\n        </div>\r\n        <div class=\"govuk-form-group\">\r\n            <div *ngIf=\"data.groups && group.value[control]===data.value\" class=\"govuk-radios__conditional\">\r\n                <ng-container *ngFor=\"let subgroup of data.groups\">\r\n                    <app-fieldset *ngIf=\"subgroup.fieldset\"\r\n                                  [classes]=\"'govuk-fieldset'\"\r\n                                  [group]=\"group\"\r\n                                  [data]=\"subgroup.fieldset\"\r\n                                  [validate]=\"validate\"\r\n                                  >\r\n                    </app-fieldset>\r\n                    <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"subgroup\"></app-jui-form-elements>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n      </ng-container>\r\n  </div>\r\n</ng-container>\r\n`\r\n})\r\nexport class RadiobuttonComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() idPrefix = 'rb';\r\n    @Input() name = 'rb';\r\n    @Input() items;\r\n    @Input() classes;\r\n    @Input() control;\r\n    @Input() validate;\r\n    @Input() showValidation;\r\n    @Input() validationError;\r\n\r\n    constructor() { }\r\n\r\n}\r\n","import {Component, ElementRef, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-checkbox',\r\n    template: `<ng-container>\r\n    <div  *ngIf=\"group\" class=\"govuk-checkboxes__item\" [formGroup]=\"group\">\r\n        <input class=\"govuk-checkboxes__input\" [formControlName]=\"items.control\" id=\"{{items.control}}\" type=\"checkbox\" [value]=\"items.value\">\r\n        <app-label [class]=\"labelClasses\" [forElement]=\"items.control\">{{items.text}}</app-label>\r\n    </div>\r\n    <ng-content></ng-content>\r\n</ng-container>\r\n`\r\n})\r\nexport class CheckboxComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() idPrefix;\r\n    @Input() name;\r\n    @Input() items;\r\n    @Input() classes;\r\n    @Input() labelClasses;\r\n    @Input() validate;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-textareas',\r\n  template: `<ng-container [formGroup]=\"group\">\r\n  <app-label\r\n             [forElement]=\"labelFor\">{{label.text}}\r\n  </app-label>\r\n  <ng-container *ngIf=\"validationError\">\r\n    <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"control\" id=\"{{control}}\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <textarea [class]=\"classes\"\r\n            [ngClass]=\"{'govuk-textarea--error':isControlInvalidAndShowValidation(group, control, showValidation) || isGroupInvalidAndShowValidation(group, showValidation)}\"\r\n            [rows]=\"rows\"\r\n            [id]=\"labelFor\"\r\n            [attr.aria-label]=\"labelFor\"\r\n            [formControlName]=\"control\"></textarea>\r\n</ng-container>\r\n`\r\n})\r\n/**\r\n * TextareasComponent\r\n *\r\n * Features:\r\n * If this component is told to show it's validation, and the input the user has entered is invalid,\r\n * then we should display a red box around the text area.\r\n */\r\nexport class TextareasComponent {\r\n  @Input() group: FormGroup;\r\n  @Input() idPrefix = 'ta';\r\n  @Input() name = 'ta';\r\n  @Input() id = 'ta';\r\n  @Input() labelFor;\r\n  @Input() rows;\r\n  @Input() classes;\r\n  @Input() control;\r\n  @Input() showValidation;\r\n  @Input() label;\r\n  @Input() items;\r\n  @Input() validationError;\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  isGroupInvalidAndShowValidation (formGroup: FormGroup, showValidation: boolean) {\r\n\r\n    if(formGroup.errors && formGroup.errors[this.control] && showValidation) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * showValidationAndIsControlValid\r\n   *\r\n   * Return true if this component is required to show it's validation, and the users input is invalid.\r\n   *\r\n   * // @param showValidation\r\n   * // @param formGroup\r\n   * // @param control\r\n   * //@return {boolean}\r\n   */\r\n  isControlInvalidAndShowValidation(formGroup: FormGroup, control: string, showValidation: boolean) {\r\n\r\n\r\n    return !this.isFormControlValid(formGroup, control) && showValidation;\r\n  }\r\n\r\n  /**\r\n   * Checks if this control is valid.\r\n   *\r\n   * @see ValidationService\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n    return this.validationService.isFormControlValid(formGroup, control);\r\n  }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-buttons',\r\n  template: `<ng-container *ngIf=\"group\" [formGroup]=\"group\">\r\n    <input id=\"{{control + value}}\" [class]=\"classes\" [type]=\"typeBtn\" [formControlName]=\"control\" [value]=\"value\">\r\n</ng-container>\r\n`\r\n})\r\nexport class ButtonsComponent implements OnInit {\r\n    @Input() idPrefix = 'btn';\r\n    @Input() name = 'btn';\r\n    @Input() group: FormGroup;\r\n    @Input() classes;\r\n    @Input() typeBtn;\r\n    @Input() control;\r\n    @Input() value;\r\n\r\n    constructor() {\r\n    }\r\n    isValid: boolean;\r\n    ngOnInit(): void {\r\n\r\n      this.isValid = this.group.status === 'INVALID';\r\n      this.group.valueChanges.subscribe(value => {\r\n        this.isValid = this.group.status === 'INVALID';\r\n      });\r\n\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-label',\r\n  template: `<label [attr.for]=\"forElement\"><ng-content></ng-content></label>\r\n`\r\n})\r\nexport class LabelComponent {\r\n  @Input() forElement;\r\n\r\n  constructor() {}\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-hidden-input',\r\n  template: `<ng-container\r\n  [formGroup]=\"group\">\r\n    <input\r\n           [ngClass]=\"componentClasses\"\r\n           [formControlName]=\"item.control\"\r\n           [id]=\"item.control\"\r\n           [name]=\"item.control\"\r\n           [value]=\"value\"\r\n           type=\"hidden\">\r\n</ng-container>\r\n`\r\n})\r\nexport class HiddenInputComponent implements OnInit{\r\n    @Input() group: FormGroup;\r\n    @Input() item: {\r\n      control: string;\r\n      classes: Array<string>\r\n    };\r\n    @Input() value;\r\n    componentClasses: string;\r\n    constructor() {\r\n    }\r\n    ngOnInit(): void {\r\n      this.componentClasses = 'govuk-input' + this.item.classes;\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-header',\r\n    template: `<div class=\"govuk-error-summary\" aria-labelledby=\"error-summary-title\" role=\"alert\" tabindex=\"-1\"\r\n     data-module=\"error-summary\">\r\n  <h2 class=\"govuk-error-summary__title\" id=\"error-summary-title\">\r\n    There is a problem\r\n  </h2>\r\n  <div class=\"govuk-error-summary__body\">\r\n    <ul class=\"govuk-list govuk-error-summary__list\">\r\n      <li *ngFor=\"let validationHeaderErrorMessage of validationHeaderErrorMessages\">\r\n        <ng-container *ngIf=\"isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_CONTROL) &&\r\n                                        !isFormControlValid(formGroup, validationHeaderErrorMessage.controlId)\">\r\n          <a routerLink=\"./\" fragment=\"{{validationHeaderErrorMessage.href}}\">{{validationHeaderErrorMessage.text}}</a>\r\n        </ng-container>\r\n        <ng-container\r\n          *ngIf=\"isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_GROUP) &&\r\n                                isFormGroupInvalid(formGroup, validationHeaderErrorMessage.formGroupValidationErrorId)\">\r\n          <a routerLink=\"./\" fragment=\"{{validationHeaderErrorMessage.href}}\">{{validationHeaderErrorMessage.text}}</a>\r\n        </ng-container>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n`\r\n})\r\n/**\r\n * ValidationHeaderComponent\r\n *\r\n * If the control that this error message component links to is not valid we\r\n * show the Error Message, sent through from the parent component.\r\n */\r\nexport class ValidationHeaderComponent {\r\n    @Input() formGroup: FormGroup;\r\n    @Input() controlId;\r\n\r\n    // TODO : deprecate as not needed?\r\n    @Input() idPrefix = 'ta';\r\n    @Input() name = 'ta';\r\n\r\n    // TODO : Move to constants file.\r\n    FORM_CONTROL = 'formControl';\r\n    FORM_GROUP = 'formGroup';\r\n\r\n    /**\r\n     * Signature for validationHeaderControls to be used in a Unit Test is:\r\n     *\r\n     * [{\r\n     *  value: 'Enter what information is needed',\r\n     *  controlId: 'informationNeeded',\r\n     *  pageLink: '#linkToTextArea'\r\n     * },\r\n     * {\r\n     *  value: 'Select yes if you want to include an annotated version of the draft consent order',\r\n     *  controlId: 'includeAnnotatedVersionDraftConsOrder',\r\n     *  pageLink: '#linkToRadiobuttons'\r\n     *}];\r\n     */\r\n    @Input() validationHeaderErrorMessages;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Checks if this control is valid.\r\n     *\r\n     * // @see ValidationService\r\n     * // @param control - 'informationNeeded'\r\n     */\r\n    isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n\r\n        return this.validationService.isFormControlValid(formGroup, control);\r\n    }\r\n\r\n    /**\r\n     * isFormGroupInvalid\r\n     *\r\n     * // @param formGroup\r\n     * // @param validationErrorId\r\n     * // @return {boolean}\r\n     */\r\n    isFormGroupInvalid(formGroup: FormGroup, validationErrorId: string): boolean {\r\n\r\n        return this.validationService.isFormGroupInvalid(formGroup, validationErrorId);\r\n    }\r\n\r\n    /**\r\n     * Checks if we should show a validation message for a form control, or the\r\n     * form group.\r\n     *\r\n     * // @param {string} validationLevel - validation level can either be formGroup or formControl.\r\n     * A formGroup level is validation that handles multiply form controls, when validating multiply components\r\n     * at the same time, ie. when you wish to see if a checkbox is checked, from multiply checkboxes, you must\r\n     * check this on a common ancestor of a set of controls. This common ancestor is always the Angular FormGroup.\r\n     * formControl level is validation that handles a single form control.\r\n     *\r\n     * This abstration was based on how Angular 6's FormGroup and FormControl are abstract from each other,\r\n     * after reading.\r\n     *\r\n     * // @param controlId\r\n     * // @return {boolean}\r\n     */\r\n    isValidationLevel(validationLevel: string, level: string): boolean {\r\n        return validationLevel === level;\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-error-formcontrol',\r\n    template: `<ng-container [formGroup]=\"group\" *ngIf=\"!isFormControlValid(group, controlId)\" >\r\n    <span id=\"{{controlId}}\" class=\"govuk-error-message\" >\r\n        <ng-content></ng-content>\r\n    </span>\r\n</ng-container>\r\n`\r\n})\r\n\r\n/**\r\n * ValidationErrorFormControlComponent\r\n *\r\n * We show an error message if the FormControl that this component links to via controlId is invalid.\r\n */\r\nexport class ValidationErrorFormControlComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() controlId;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Is Form Control Valid\r\n     *\r\n     * TODO: Unit\r\n     *\r\n     * // @see ValidationService\r\n     * // @param {FormGroup} formGroup\r\n     * // @param {string} controlId - ie. 'informationNeeded'\r\n     * // @return {boolean}\r\n     */\r\n    isFormControlValid(formGroup: FormGroup, controlId: string): boolean {\r\n        return this.validationService.isFormControlValid(formGroup, controlId);\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-error-formgroup',\r\n    template: `<ng-container [formGroup]=\"group\" *ngIf=\"isFormGroupInvalid(group, validationErrorId)\" >\r\n    <span id=\"{{validationErrorId}}\" class=\"govuk-error-message\">\r\n        <ng-content></ng-content>\r\n    </span>\r\n</ng-container>\r\n`\r\n})\r\n\r\n/**\r\n * Validation Error FormGroup Component\r\n *\r\n * We show an error message if the validation error associated with the FormGroup is thrown by the FormGroup.\r\n *\r\n * Note that we have validation on both FormGroup and FormControl level. FormControl level to validate single\r\n * controls, FormGroup level to validate multiply controls. This is the method suggested in the Angular 6 documents.\r\n *\r\n * An example of multiply controls, where we would leverage the FormGroup validation would be; checking if one\r\n * Checkbox is checked, out a set of multiply Checkboxes.\r\n *\r\n * // @see https://angular.io/guide/form-validation#adding-to-reactive-forms-1\r\n */\r\nexport class ValidationErrorFormGroupComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() validationErrorId;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Is Form Group Invalid\r\n     *\r\n     * TODO : Unit Test\r\n     *\r\n     * // @see ValidationService\r\n     * // @param {FormGroup} formGroup\r\n     * // @param {string} validationErrorId - ie. 'reasonsConstentOrderNotApproved' - This is the validation identifier\r\n     * we assign to a group of form controls, we assign this when we currently setValidators(), note that we will\r\n     * need to pass this in once the Universal Form Builder is merged with Validation.\r\n     * // @return {boolean}\r\n     */\r\n    isFormGroupInvalid(formGroup: FormGroup, validationErrorId: string): boolean {\r\n        return this.validationService.isFormGroupInvalid(formGroup, validationErrorId);\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {CommonModule, DatePipe} from '@angular/common';\r\nimport {HmctsFormBuilderComponent} from './hmcts-form-builder.component';\r\nimport {FromBuilderComponent} from './components/form-builder/from-builder.component';\r\nimport {FieldsetComponent} from './components/fieldset/fieldset.component';\r\nimport {JuiFormElementsComponent} from './components/jui-form-elements/jui-form-elements.component';\r\nimport {LegendComponent} from './components/legend/legend.component';\r\nimport {HintComponent} from './components/hint/hint.component';\r\nimport {DateComponent} from './components/date/date.component';\r\nimport {InputsComponent} from './components/inputs/inputs.component';\r\nimport {RadiobuttonComponent} from './components/radiobutton/radiobutton.component';\r\nimport {CheckboxComponent} from './components/checkbox/checkbox.component';\r\nimport {TextareasComponent} from './components/textareas/textareas.component';\r\nimport {ButtonsComponent} from './components/buttons/buttons.component';\r\nimport {LabelComponent} from './components/label/label.component';\r\nimport {HiddenInputComponent} from './components/hidden-input/hidden-input.component';\r\nimport {ValidationHeaderComponent} from './components/validation-header/validation-header.component';\r\nimport {ValidationErrorFormControlComponent} from './components/validation-error-formcontrol/validation-error-formcontrol.component';\r\nimport {ValidationErrorFormGroupComponent} from './components/validation-error-formgroup/validation-error-formgroup.component';\r\nimport {FormsService} from './services/form-builder.service';\r\nimport {ValidationService} from './services/form-builder-validation.service';\r\nimport {RouterModule} from '@angular/router';\r\n\r\n\r\nconst COMPONENTS = [\r\n  FromBuilderComponent,\r\n  FieldsetComponent,\r\n  ValidationErrorFormGroupComponent,\r\n  FromBuilderComponent,\r\n  FieldsetComponent,\r\n  JuiFormElementsComponent,\r\n  LegendComponent,\r\n  HintComponent,\r\n  DateComponent,\r\n  InputsComponent,\r\n  RadiobuttonComponent,\r\n  CheckboxComponent,\r\n  TextareasComponent,\r\n  ButtonsComponent,\r\n  LabelComponent,\r\n  HiddenInputComponent,\r\n  ValidationHeaderComponent,\r\n  ValidationErrorFormControlComponent,\r\n  HmctsFormBuilderComponent\r\n];\r\n\r\nconst SERVICES = [\r\n  FormsService,\r\n  ValidationService,\r\n  DatePipe\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  providers: [\r\n    ...SERVICES\r\n  ]\r\n})\r\nexport class HmctsFormBuilderModule {\r\n}\r\n"],"names":[],"mappings":"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"}
