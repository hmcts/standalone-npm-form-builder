{"version":3,"sources":["ng://example-npm-module/lib/hmcts-form-builder.service.ts","ng://example-npm-module/lib/hmcts-form-builder.component.ts","null","ng://example-npm-module/lib/services/form-builder-validation.service.ts","ng://example-npm-module/lib/services/form-builder.service.ts","ng://example-npm-module/lib/components/form-builder/from-builder.component.ts","ng://example-npm-module/lib/components/fieldset/fieldset.component.ts","ng://example-npm-module/lib/components/jui-form-elements/jui-form-elements.component.ts","ng://example-npm-module/lib/components/legend/legend.component.ts","ng://example-npm-module/lib/components/hint/hint.component.ts","ng://example-npm-module/lib/components/date/date.component.ts","ng://example-npm-module/lib/components/inputs/inputs.component.ts","ng://example-npm-module/lib/components/radiobutton/radiobutton.component.ts","ng://example-npm-module/lib/components/checkbox/checkbox.component.ts","ng://example-npm-module/lib/components/textareas/textareas.component.ts","ng://example-npm-module/lib/components/buttons/buttons.component.ts","ng://example-npm-module/lib/components/label/label.component.ts","ng://example-npm-module/lib/components/hidden-input/hidden-input.component.ts","ng://example-npm-module/lib/components/validation-header/validation-header.component.ts","ng://example-npm-module/lib/components/validation-error-formcontrol/validation-error-formcontrol.component.ts","ng://example-npm-module/lib/components/validation-error-formgroup/validation-error-formgroup.component.ts","ng://example-npm-module/lib/hmcts-form-builder.module.ts"],"names":["HmctsFormBuilderService","Injectable","args","providedIn","HmctsFormBuilderComponent","prototype","ngOnInit","Component","selector","template","styles","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","ValidationService","datePipe","this","simpleName","ngValidatorFunction","Validators","required","email","getNgValidationFunctionMap","ngValidatorFunctionMap","getNgValidators","validators","_this","ngValidators","forEach","validatorName","_a","tslib_1.__values","_b","controlHasValidation","isFormControlValid","formGroup","control","get","valid","isFormGroupInvalid","validationErrorId","errors","hasOwnProperty","isAnyCheckboxChecked","checkboxes","validationIdentifier","controls","checkboxes_1","checkboxes_1_1","checkbox","isAllFieldsRequiredValidationFn","fields","fields_1","fields_1_1","field","isAllFieldsRequired","isValidDateValidationFn","dateValueArray","fields_2","fields_2_1","dateValueArray_1","dateValueArray_1_1","element","Number","_c","_e","_f","toString","slice","dateStr","Date","toISOString","replace","_g","isValidDate","isTextAreaValidWhenCheckboxChecked","formControls","checkboxControl","textareaControl","isRadioValidWhenSomeOptionSelected","selectedOptions","option","radioControl","selectedOption","childValidator","validatorFunc","_d","createFormGroupValidators","formGroupValidators","map","formGroupValidator","groupValidator","createFormGroupValidator","DatePipe","FormsService","validationService","create","someJson","someData","prop","radioGroup","undefined","Object","keys","radioEl","FormControls","FormControl","createFormControl","isArray","someJson_1","someJson_1_1","item","initialValue","controlName","defineformControls","FromBuilderComponent","formsService","EventEmitter","ngOnChanges","changes","currentValue","createForm","formDraft","FormGroup","pageItems","pageValues","setValidators","onFormSubmit","submitPage","emit","Input","Output","FieldsetComponent","JuiFormElementsComponent","LegendComponent","HintComponent","DateComponent","InputsComponent","isControlInvalidAndShowValidation","showValidation","RadiobuttonComponent","CheckboxComponent","TextareasComponent","isGroupInvalidAndShowValidation","ButtonsComponent","isValid","group","status","valueChanges","subscribe","LabelComponent","HiddenInputComponent","componentClasses","classes","ValidationHeaderComponent","isValidationLevel","validationLevel","level","ValidationErrorFormControlComponent","controlId","ValidationErrorFormGroupComponent","COMPONENTS","SERVICES","NgModule","imports","CommonModule","FormsModule","RouterModule","ReactiveFormsModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HmctsFormBuilderService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hmcts-hmcts-form-builder',\n  template: `\n    <p>\n      hmcts-form-builder works!\n    </p>\n  `,\n  styles: []\n})\nexport class HmctsFormBuilderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {AbstractControl, Form, FormGroup} from '@angular/forms';\r\nimport {Validators, ValidationErrors, ValidatorFn} from '@angular/forms';\r\nimport {DatePipe} from '@angular/common';\r\nimport {controlsisTextAreaValidWhenCheckboxChecked, controlsRadioConditionalModel, FormGroupValidator} from './form-group-validation.typescript';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidationService {\r\n\r\n  // FOR SINGLE CONTROLS - formGroup.control level validation\r\n  /**\r\n   * Custom validators can be added to this.\r\n   *\r\n   * TODO : Define interface for array.\r\n   * TODO : Add a Custom Validator example.\r\n   *\r\n   * @see https://angular.io/guide/form-validation#custom-validators\r\n   */\r\n  ngValidatorFunctionMap: Array<any> = [\r\n    {\r\n      simpleName: 'required',\r\n      ngValidatorFunction: Validators.required\r\n    },\r\n    {\r\n      simpleName: 'email',\r\n      ngValidatorFunction: Validators.email\r\n    }\r\n  ];\r\n\r\n\r\n  constructor(private datePipe: DatePipe) {\r\n  }\r\n\r\n  /**\r\n   * Returns a map of how we've mapped simple names to Ng Validators, and in the future custom validators.\r\n   *\r\n   * TODO: Check return in Unit test.\r\n   *\r\n   * // @returnArray\r\n   */\r\n  getNgValidationFunctionMap() {\r\n    return this.ngValidatorFunctionMap;\r\n  }\r\n\r\n  /**\r\n   * Takes in an array of simple validation names.\r\n   *\r\n   * These names map to Ng Validation functions, and can map to more complex custom validation functions.\r\n   *\r\n   * This allows us to leverage the power of Ng Validation, and custom validation, as well as giving us\r\n   * the ability to create reusable validators, that can be used throughout our forms.\r\n   *\r\n   * Note: Validators.minLength requires Validators.required\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * @see state_meta\r\n   * // @param validators - ie. ['required', 'email']\r\n   */\r\n  getNgValidators(validators: Array<string>): any[] {\r\n\r\n    const ngValidators: Array<any> = [];\r\n\r\n    validators.forEach((validatorName) => {\r\n      for (const ngValidatorFunction of this.getNgValidationFunctionMap()) {\r\n        if (ngValidatorFunction.simpleName === validatorName) {\r\n          ngValidators.push(ngValidatorFunction.ngValidatorFunction);\r\n        }\r\n      }\r\n    });\r\n\r\n    return ngValidators;\r\n  }\r\n\r\n  /**\r\n   * Checks if validators have been set on the control, an example of a validator being set on a control is:\r\n   *\r\n   * {\r\n     *  control: 'informationNeeded',\r\n     *  value: 'Information text',\r\n     *  validators: ['required']\r\n     * }\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * //@param {Array} validators - ['required']\r\n   * //@return {boolean}\r\n   */\r\n  controlHasValidation(validators: Array<string>): boolean {\r\n\r\n    return validators && validators.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Checks if the control is valid.\r\n   *\r\n   * Returns a boolean, based on if the control which is part\r\n   * of a form group is valid or not.\r\n   *\r\n   * TODO: Unit test.\r\n   *\r\n   * // @param {FormGroup} formGroup\r\n   * // @param {String} control - 'informationNeeded'\r\n   * // @return {boolean}\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n\r\n    return formGroup.get(control).valid;\r\n  }\r\n\r\n  // FOR MULTIPLY CONTROLS - formGroup level validation.\r\n  /**\r\n   * Is Form Group Invalid\r\n   *\r\n   * Checks if a validation error has been thrown on the pages Angular FormGroup.\r\n   *\r\n   * FormGroup is a the parent of FormControls, and therefore and according to the Angular\r\n   * Docs the best place to validate against multiply controls, that have dependencies upon one\r\n   * another is on the FormGroup level.\r\n   *\r\n   * An example being; we should check if a user has checked one of eight checkboxes.\r\n   *\r\n   * TODO : Unit Test\r\n   *\r\n   * @see ValidationService\r\n   * // @param {FormGroup} formGroup\r\n   * // @param {string} validationErrorId - ie. 'reasonsConstentOrderNotApproved' - This is the validation identifier\r\n   * we assign to a group of form controls, we assign this when we currently setValidators(), note that we will\r\n   * need to pass this in once the Universal Form Builder is merged with Validation.\r\n   * // @return{boolean}\r\n   */\r\n  isFormGroupInvalid(formGroup: any, validationErrorId: string): boolean {\r\n    if (formGroup.errors && formGroup.errors.hasOwnProperty(validationErrorId)) {\r\n      return formGroup.errors[validationErrorId];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * isAnyCheckboxChecked\r\n   *\r\n   * Checks if any of the checkbox controls passed to this function are checked ie. have a boolean value\r\n   * of true.\r\n   *\r\n   * This is due to the fact that we might have multiply checkboxes within the view, and the user needs to\r\n   * select at least one of these checkboxes to have entered a valid input.\r\n   *\r\n   * Note that we validate on the formGroup level, and not the control level for this as we are concerned with\r\n   * multiple controls and the Ng 6 way is to have the validator on a common ancestor of controls; in this\r\n   * case our formGroup.\r\n   *\r\n   * If the user has checked a checked box this function returns null and therefore no validation error is returned.\r\n   * If the user has NOT checked a checkbox this function returns a validation error.\r\n   *\r\n   * // @param formGroup\r\n   * // @param {string} validationIdentifier - An error name assigned by the developer, this name can then be referred\r\n   * to display the error in the  view.\r\n   * // @return{any}\r\n   */\r\n  isAnyCheckboxChecked(formGroup: FormGroup, checkboxes: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isAnyCheckboxCheckedValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n\r\n      for (const checkbox of checkboxes) {\r\n        if (controls.get(checkbox).value === true) {\r\n          return null;\r\n        }\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n    };\r\n\r\n    return isAnyCheckboxCheckedValidationFn;\r\n  }\r\n\r\n\r\n  // Common function for validator\r\n  // Returninng the validationIdentifier true if invalid and null if valid\r\n\r\n  isAllFieldsRequiredValidationFn(controls: FormGroup, fields: Array<string>, validationIdentifier){\r\n    if (controls !== null && fields !== null) {\r\n      for (const field of fields) {\r\n        if (!controls.get(field).value) {\r\n          return {\r\n            [validationIdentifier]: true\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * isAllFieldsRequired\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * // @param validationIdentifier\r\n   * // @return{any}\r\n   */\r\n\r\n  isAllFieldsRequired(formGroup: FormGroup, fields: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isAllFieldsRequiredValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n      return this.isAllFieldsRequiredValidationFn(controls, fields, validationIdentifier);\r\n    };\r\n    return isAllFieldsRequiredValidationFn;\r\n  }\r\n\r\n  /** Common function for date validator\r\n   * Returninng the validationIdentifier true if invalid and null if valid\r\n   *\r\n   * yyyy/mm/dd\r\n   *\r\n   */\r\n\r\n\r\n  isValidDateValidationFn(controls: FormGroup, fields: Array<string>, validationIdentifier){\r\n\r\n    if (controls !== null && fields !== null) {\r\n      const dateValueArray = [];\r\n\r\n      for (const field of fields) {\r\n\r\n        if (!controls.get(field).value) {\r\n          return {\r\n            [validationIdentifier]: true\r\n          };\r\n        } else {\r\n\r\n          // Form have valid values and we can create date\r\n          // Check is form controls matching the right lengh and then create array contained date\r\n\r\n          if (controls.get(field).value.length <= 2) {\r\n            dateValueArray.push(controls.get(field).value);\r\n          } else if  (controls.get(field).value.length === 4) {\r\n            dateValueArray.push(controls.get(field).value);\r\n          } else {\r\n            return {\r\n              [validationIdentifier]: true\r\n            };\r\n          }\r\n\r\n          // Check if array is ready and convert to string\r\n\r\n          if (dateValueArray.length === 3){\r\n\r\n            //Return error if not numbers\r\n            for (const element of dateValueArray) {\r\n              if (element != Number(element)) {\r\n                return {\r\n                  [validationIdentifier]: true\r\n                };\r\n              }\r\n            }\r\n\r\n            // Convert user entered day and month to numbers\r\n            dateValueArray[1] = Number(dateValueArray[1]);\r\n            dateValueArray[2] = Number(dateValueArray[2]);\r\n\r\n            // Return error if user entered months less than 0 and more than 12\r\n            if (dateValueArray[1] <= 0 || dateValueArray[1] >= 12) {\r\n              return {\r\n                [validationIdentifier]: true\r\n              };\r\n            }\r\n            // Return error if user entered months less than 0 and more than 31\r\n            if (dateValueArray[2] <= 0 || dateValueArray[2] >= 31) {\r\n              return {\r\n                [validationIdentifier]: true\r\n              };\r\n            }\r\n\r\n            // Here value might me invalid\r\n\r\n            // Adding zeros in front if less than 10\r\n            if (dateValueArray[1] < 10) { dateValueArray[1] = (\"0\" + (dateValueArray[1]).toString().slice(-2)); }\r\n            if (dateValueArray[2] < 10) { dateValueArray[2] = (\"0\" + (dateValueArray[2]).toString().slice(-2)); }\r\n\r\n            // Get proper date format by create Date object and convert it back to string for comparison with what the user entered\r\n\r\n            const dateStr = dateValueArray.toString();\r\n\r\n            const dateObj = new Date(dateStr);\r\n            const checkDateStr = dateObj.toISOString().slice(0, 10).replace(/-/g, \",\").replace(\"T\", \" \");\r\n\r\n            // Return null if valid date\r\n            if (checkDateStr === dateStr) {\r\n              return null;\r\n            }\r\n\r\n            return {\r\n              [validationIdentifier]: true\r\n            };\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  isValidDate(formGroup: FormGroup, fields: Array<string>, validationIdentifier: string): ValidatorFn | null {\r\n    const isValidDateValidationFn: ValidatorFn = (controls: FormGroup): ValidationErrors | null => {\r\n      return this.isValidDateValidationFn(controls, fields, validationIdentifier);\r\n    };\r\n\r\n    return isValidDateValidationFn;\r\n  }\r\n\r\n  /**\r\n   * isTextAreaValidWhenCheckboxChecked\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * { checkboxControl : string, textareaControl : string }\r\n   * // @param validationIdentifier\r\n   * //@return {any}\r\n   */\r\n\r\n  isTextAreaValidWhenCheckboxChecked(formGroup: FormGroup, controls: controlsisTextAreaValidWhenCheckboxChecked, validationIdentifier: string) {\r\n\r\n\r\n    const isTextAreaValidWhenCheckboxChecked: ValidatorFn = (formControls: FormGroup): ValidationErrors | null => {\r\n\r\n      if (!formControls.get(controls.checkboxControl).value) {\r\n        return null;\r\n      }\r\n\r\n      if (formControls.get(controls.textareaControl).value && formControls.get(controls.textareaControl).value.length > 0) {\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n    };\r\n\r\n    return isTextAreaValidWhenCheckboxChecked;\r\n  }\r\n\r\n  /**\r\n   * isRadioValidWhenSomeOptionSelected\r\n   *\r\n   * // @param formGroup\r\n   * // @param controls is object\r\n   * { checkboxControl : string, textareaControl : string }\r\n   * // @param validationIdentifier\r\n   * // @return {any}\r\n   */\r\n\r\n  isRadioValidWhenSomeOptionSelected(formGroup: FormGroup, controls: any, validationIdentifier: string){\r\n\r\n    const isRadioValidWhenSomeOptionSelected: ValidatorFn = (formControls: FormGroup): ValidationErrors | null => {\r\n\r\n      for (const option of controls.selectedOptions) {\r\n        if (formControls.get(controls.radioControl).value !== null && formControls.get(controls.radioControl).value !== option.selectedOption) {\r\n\r\n          // Do not validate child if parent is valid so\r\n          // Reset child validation to valid state here\r\n          // Add word \"ValidationFn\" to the name of validator when you extend child validation functions\r\n\r\n          if (option.childValidator.validatorFunc) {\r\n            return  this[option.childValidator.validatorFunc + \"ValidationFn\"](null, null, option.childValidator.validationErrorId);\r\n          }\r\n\r\n          return null;\r\n\r\n        } else {\r\n          if (option.childValidator.validatorFunc){\r\n            return this[option.childValidator.validatorFunc + \"ValidationFn\"](formGroup, option.childValidator.controls, option.childValidator.validationErrorId);\r\n          }\r\n        }\r\n      }\r\n\r\n      return {\r\n        [validationIdentifier]: true,\r\n      };\r\n\r\n    };\r\n\r\n    return isRadioValidWhenSomeOptionSelected;\r\n  }\r\n\r\n  /**\r\n   * createFormGroupValidators\r\n   *\r\n   * FormGroup Validators are used for validation that involves more than one FormControl. ie. When a control\r\n   * depends on another, or we need to validate a group of controls together. Validation for multiply controls is\r\n   * required on the common ancestor as per the Angular Documentation.\r\n   *\r\n   * @see @see https://angular.io/guide/form-validation#adding-to-reactive-forms-1\r\n   *\r\n   * // @param {FormGroup} formGroup - Angular FormGroup\r\n   * // @param formGroupValidators - [{\r\n     *    validatorFunc: 'isAnyCheckboxChecked',\r\n     *    validationErrorId: 'reasonsConstentOrderNotApproved',\r\n     *    checkboxes: [\r\n     *        'partiesNeedAttend', 'NotEnoughInformation', 'orderNotAppearOfS25ca1973', 'd81',\r\n     *        'pensionAnnex', 'applicantTakenAdvice', 'respondentTakenAdvice', 'Other2'\r\n     *    ]}]\r\n   */\r\n  createFormGroupValidators(formGroup: FormGroup, formGroupValidators) {\r\n\r\n    return formGroupValidators.map(formGroupValidator => {\r\n\r\n      const groupValidator: FormGroupValidator = formGroupValidator;\r\n\r\n      return this.createFormGroupValidator(formGroup, groupValidator.validatorFunc, groupValidator.controls,\r\n        groupValidator.validationErrorId);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * createFormGroupValidator\r\n   *\r\n   * You'll need to pass in the name of the validator function that you wish to use.\r\n   *\r\n   * @see state_meta.js\r\n   *\r\n   * // @param formGroup\r\n   * // @param {String} validatorFunc - 'isAnyCheckboxChecked'\r\n   * // @param {Array or Object} controls - ['partiesNeedAttend', 'NotEnoughInformation'] or { checkbox: 'controlName', textarea: 'controlName' }\r\n   * // @param {String} validationErrorId - 'reasonsConstentOrderNotApproved'\r\n   *\r\n   * // @return {ValidatorFn}\r\n   */\r\n  createFormGroupValidator(formGroup: FormGroup, validatorFunc: string, controls: any, validationErrorId: string): ValidatorFn {\r\n\r\n    return this[validatorFunc](formGroup, controls, validationErrorId);\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {FormControl, Validators} from '@angular/forms';\r\nimport {ValidationService} from './form-builder-validation.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormsService {\r\n  FormControls = [];\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  /**\r\n   * Creation of FormControls for a FormGroup.\r\n   * So first thing is how do we add Validation to a FormControl\r\n   *\r\n   * prop can be a fieldset, legend, text, idPrefix, name, header, checkboxes, if we\r\n   *\r\n   * Here is where the validation is applied to each of the controls of the form, based on the validators that\r\n   * have been plaed into the state_meta.js.\r\n   *\r\n   * TODO: Name this something totally different, as create doesn't really explain what it does,\r\n   * also there it's quite hard to work out.\r\n   *\r\n   * @param someJson\r\n   * @param someData\r\n   */\r\n  create(someJson, someData) {\r\n    if (typeof someJson === 'object') {\r\n      for (const prop in someJson) {\r\n\r\n        if (prop === 'control') {\r\n          if (someJson.radioGroup !== undefined) {\r\n            // RadioButton Logic\r\n            if (Object.keys(someData).length !== 0) {\r\n              for (const radioEl of someJson.radioGroup) {\r\n                if (radioEl.value === someData[someJson.control]) {\r\n                  this.FormControls[someJson.control] = new FormControl(radioEl.value);\r\n                  break;\r\n                } else {\r\n                  this.createFormControl(null, someJson.control, someJson.validators);\r\n                }\r\n              }\r\n            } else {\r\n              this.FormControls[someJson.control] = new FormControl();\r\n            }\r\n          } else {\r\n            if (someData[someJson.control]) {\r\n\r\n              this.FormControls[someJson.control] = new FormControl(someData[someJson.control]);\r\n            } else {\r\n              this.createFormControl(someJson.value, someJson.control, someJson.validators);\r\n            }\r\n          }\r\n        }\r\n        this.create(someJson[prop], someData);\r\n      }\r\n    }\r\n    if (someJson !== undefined && someJson.isArray) {\r\n\r\n      for (const item  of someJson) {\r\n        this.create(someJson[item], someData);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Creates a new `FormControl` instance.\r\n   * @param controlName - 'informationNeeded'\r\n   * @param initialValue - ie. text if it's a textarea.\r\n   */\r\n  createFormControl(initialValue: any, controlName: string, validators: Array<string>) {\r\n\r\n    if (this.validationService.controlHasValidation(validators)) {\r\n      this.FormControls[controlName] = new FormControl(initialValue, this.validationService.getNgValidators(validators));\r\n      return;\r\n    }\r\n\r\n    this.FormControls[controlName] = new FormControl(initialValue);\r\n  }\r\n\r\n  defineformControls(someJson: any, someData: any): any {\r\n    this.FormControls = [];\r\n    this.create(someJson, someData);\r\n    return this.FormControls;\r\n  }\r\n}\r\n","import {Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {FormsService} from '../../services/form-builder.service';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n/**\r\n * Form Builder Wrapper\r\n * Component accepts pageItems and pageValues for From Builder to process\r\n * and it emits form data to it's parent component.\r\n */\r\n\r\n@Component({\r\n  selector: 'app-form-builder',\r\n  template: `<ng-container *ngIf=\"isPageValid && formDraft.invalid\">\r\n  <app-validation-header [validationHeaderErrorMessages]=\"this.pageItems.validationHeaderErrorMessages\" [formGroup]=\"formDraft\">\r\n  </app-validation-header>\r\n</ng-container>\r\n\r\n<form *ngIf=\"pageItems\" [formGroup]=\"formDraft\" (ngSubmit)=\"onFormSubmit()\">\r\n  <div [ngClass]=\"{'govuk-form-group':true, 'govuk-form-group--error' : isPageValid && formDraft.invalid }\">\r\n    <h1 class=\"govuk-heading-xl\">\r\n      <span *ngIf=\"pageItems.caption\" [class]=\"pageItems.caption.classes\">{{ pageItems.caption.text }}</span>\r\n      {{pageItems.header}}\r\n    </h1>\r\n    <div class=\"govuk-form-group\" *ngFor=\"let group of pageItems.groups\">\r\n      <app-fieldset *ngIf=\"group.fieldset\"\r\n                    [classes]=\"'govuk-fieldset'\"\r\n                    [group]=\"formDraft\"\r\n                    [data]=\"group.fieldset\"\r\n                    [validate]=\"isPageValid\">\r\n      </app-fieldset>\r\n      <app-jui-form-elements [group]=\"formDraft\" [validate]=\"isPageValid\" [data]=\"group\"></app-jui-form-elements>\r\n    </div>\r\n  </div>\r\n</form>\r\n`\r\n})\r\n\r\nexport class FromBuilderComponent implements OnChanges {\r\n\r\n  constructor(\r\n    private formsService: FormsService,\r\n    private validationService: ValidationService) {}\r\n\r\n  @Input() pageItems: any;\r\n  @Input() pageValues: any;\r\n  @Input() isPageValid: boolean;\r\n  @Output() submitPage = new EventEmitter<FormGroup>();\r\n\r\n  formDraft: FormGroup;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.pageItems && changes.pageItems.currentValue) {\r\n      this.createForm();\r\n    }\r\n  }\r\n\r\n  createForm() {\r\n    this.formDraft = new FormGroup(this.formsService.defineformControls(this.pageItems, this.pageValues));\r\n    this.setValidators();\r\n  }\r\n\r\n  setValidators(): void {\r\n    if (this.pageItems) {\r\n      const formGroupValidators = this.validationService.createFormGroupValidators(this.formDraft, this.pageItems.formGroupValidators);\r\n      this.formDraft.setValidators(formGroupValidators);\r\n    }\r\n  }\r\n\r\n  onFormSubmit() {\r\n    this.submitPage.emit(this.formDraft);\r\n  }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-fieldset',\r\n  template: `<fieldset [attr.validate]=\"validate\" [class]=\"classes\" [attr.data]=\"data\" [attr.group]=\"group\">\r\n    <ng-container *ngFor=\"let item of data\">\r\n        <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"item\"></app-jui-form-elements>\r\n    </ng-container>\r\n    <ng-content></ng-content>\r\n</fieldset>\r\n`\r\n})\r\nexport class FieldsetComponent {\r\n    @Input() classes;\r\n    @Input() validate;\r\n    @Input() group;\r\n    @Input() data: Array<any>;\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-jui-form-elements',\r\n  template: `<div [attr.validate]=\"validate\" [attr.data]=\"data\" [attr.group]=\"group\">\r\n  <!--JUI FORM builder component -->\r\n  <app-legend *ngIf=\"data.legend\" [classes]=\"data.legend.classes\">\r\n    {{data.legend.text}}\r\n  </app-legend>\r\n  <app-hint *ngIf=\"data.hint\" [classes]=\"data.hint.classes\">\r\n    {{data.hint.text}}\r\n  </app-hint>\r\n  <ng-container *ngIf=\"data.validationError && validate\">\r\n    <app-validation-error-formgroup [group]=\"group\" [validationErrorId]=\"data.validationError.identifier\">\r\n      {{data.validationError.value}}\r\n    </app-validation-error-formgroup>\r\n  </ng-container>\r\n  <app-date *ngIf=\"data.date\"\r\n            [id]=\"data.date.formName\"\r\n            [data]=\"data.date\"\r\n            [group]=\"group\"\r\n            [validate]=\"validate\"\r\n            [validationError]=\"data.date.validationError\">\r\n  </app-date>\r\n  <app-inputs *ngIf=\"data.input\"\r\n              [item]=\"data.input\"\r\n              [showValidation]=\"validate\"\r\n              [validationError]=\"data.input.validationError\"\r\n              [group]=\"group\"\r\n              [hint]=\"data.input.hint\"\r\n              [label]=\"data.input.label\"\r\n              [labelFor]=\"data.input.control\"></app-inputs>\r\n  <app-radiobutton *ngIf=\"data.radios\" [classes]=\"'govuk-radios ' + data.radios.classes\"\r\n                   [items]=\"data.radios.radioGroup\"\r\n                   [group]=\"group\"\r\n                   [control]=\"data.radios.control\"\r\n                   [idPrefix]=\"data.radios.control\"\r\n                   [validate]=\"validate\"\r\n                   [showValidation]=\"validate\"\r\n                   [validationError]=\"data.radios.validationError\">\r\n  </app-radiobutton>\r\n  <div *ngIf=\"data.checkbox\" class=\"govuk-checkboxes\">\r\n    <app-checkbox [group]=\"group\"\r\n                  [validate]=\"validate\"\r\n                  [idPrefix]=\"data.checkbox.control\"\r\n                  [items]=\"data.checkbox\"\r\n                  [classes]=\"'govuk-checkboxes__item'\"\r\n                  [labelClasses]=\"'govuk-label govuk-checkboxes__label'\">\r\n      <div class=\"govuk-form-group\">\r\n        <div *ngIf=\"data.checkbox.groups && group.controls[data.checkbox.control].value\" class=\"govuk-checkboxes__conditional\"\r\n             [ngStyle] = \"{ 'border-left': (validate && group.invalid) ? '5px solid #b10e1e' : '' }\">\r\n          <ng-container  *ngFor=\"let subgroup of data.checkbox.groups\">\r\n            <app-fieldset *ngIf=\"subgroup.fieldset\"\r\n                          [validate]=\"validate\"\r\n                          [classes]=\"'govuk-fieldset'\"\r\n                          [group]=\"group\"\r\n                          [data]=\"subgroup.fieldset\"\r\n            >\r\n            </app-fieldset>\r\n            <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"subgroup\"></app-jui-form-elements>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </app-checkbox>\r\n  </div>\r\n\r\n  <app-textareas *ngIf=\"data.textarea\" [classes]=\"'govuk-textarea'\"\r\n                 [showValidation]=\"validate\"\r\n                 [validationError]=\"data.textarea.validationError\"\r\n                 [group]=\"group\"\r\n                 [control]=\"data.textarea.control\"\r\n                 [label]=\"data.textarea.label\"\r\n                 [labelFor]=\"data.textarea.control\"\r\n                 [rows]=\"5\">\r\n  </app-textareas>\r\n  <app-buttons *ngIf=\"data.button\"\r\n               [classes]=\"'govuk-button'\"\r\n               [typeBtn]=\"data.button.type\"\r\n               [group]=\"group\"\r\n               [control]=\"data.button.control\"\r\n               [value]=\"data.button.value\">\r\n  </app-buttons>\r\n  <!--JUI FORM builder component -->\r\n</div>\r\n`\r\n})\r\nexport class JuiFormElementsComponent{\r\n  @Input() group: FormGroup;\r\n  @Input() data;\r\n  @Input() validate;\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-legend',\r\n  template: `<legend [class]=\"'govuk-fieldset__legend ' + classes\">\r\n    <ng-content></ng-content>\r\n</legend>\r\n`\r\n})\r\nexport class LegendComponent {\r\n    @Input() classes:  string;\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-hint',\r\n  template: `<span [class]=\"classes\">\r\n    <ng-content></ng-content>\r\n</span>\r\n`,\r\n  styles: [``]\r\n})\r\nexport class HintComponent {\r\n    @Input() classes;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-date',\r\n  template: `<ng-container>\r\n    <app-validation-error-formgroup *ngIf=\"data.validationError && validate\" [group]=\"group\" [validationErrorId]=\"data.validationError.identifier\">\r\n        {{data.validationError.value}}\r\n    </app-validation-error-formgroup>\r\n    <div class=\"govuk-date-input\" [id]=\"id\" [attr.data]=\"data\">\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.day.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.day.input.label\"\r\n                            [labelFor]=\"data.day.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.month.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.month.input.label\"\r\n                            [labelFor]=\"data.month.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n        <div class=\"govuk-date-input__item\">\r\n            <div class=\"govuk-form-group\">\r\n                <app-inputs [item]=\"data.year.input\"\r\n                            [group]=\"group\"\r\n                            [label]=\"data.year.input.label\"\r\n                            [labelFor]=\"data.year.input.control\"\r\n                            [showValidation]=\"\"></app-inputs>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n`\r\n})\r\nexport class DateComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() id;\r\n    @Input() data;\r\n    @Input() validate;\r\n    @Input() showValidation;\r\n    @Input() validationError;\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-inputs',\r\n  template: `<ng-container [formGroup]=\"group\">\r\n  <app-label [forElement]=\"labelFor\">{{label.text}}\r\n  </app-label>\r\n  <app-hint *ngIf=\"hint\" [classes]=\"hint.classes\">\r\n    {{hint.text}}\r\n  </app-hint>\r\n  <ng-container *ngIf=\"validationError\">\r\n    <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"item.control\" id=\"{{item.control}}\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <input [class]=\"'govuk-input ' + item.classes\"\r\n         [formControlName]=\"item.control\"\r\n         [id]=\"item.control\"\r\n         [name]=\"item.control\"\r\n         [ngClass]=\"{'govuk-input--error':isControlInvalidAndShowValidation(group, item.control, showValidation)}\"\r\n         type=\"text\">\r\n</ng-container>\r\n`\r\n})\r\nexport class InputsComponent {\r\n  @Input() group: FormGroup;\r\n  @Input() item;\r\n  @Input() label;\r\n  @Input() hint;\r\n  @Input() labelFor;\r\n  @Input() showValidation;\r\n  @Input() validationError;\r\n  name;\r\n  id;\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  /**\r\n   * showValidationAndIsControlValid\r\n   *\r\n   * Return true if this component is required to show it's validation, and the users input is invalid.\r\n   *\r\n   * //@param showValidation\r\n   * //@param formGroup\r\n   * //@param control\r\n   * //@return {boolean}\r\n   */\r\n  isControlInvalidAndShowValidation(formGroup: FormGroup, control: string, showValidation: boolean) {\r\n\r\n    return !this.isFormControlValid(formGroup, control) && showValidation;\r\n  }\r\n\r\n  /**\r\n   * Checks if this control is valid.\r\n   *\r\n   *  ValidationService\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n    return this.validationService.isFormControlValid(formGroup, control);\r\n  }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-radiobutton',\r\n  template: `<ng-container>\r\n  <ng-container *ngIf=\"validationError\">\r\n      <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"control\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <div [class]=\"classes\" [formGroup]=\"group\">\r\n      <ng-container *ngFor=\"let data of items; let i = index\">\r\n        <div *ngIf=\"data.devider\" class=\"govuk-radios__divider\">{{data.devider}}</div>\r\n        <div *ngIf=\"!data.devider\" class=\"govuk-radios__item\">\r\n            <input class=\"govuk-radios__input\" id=\"{{control + data.value}}\" [formControlName]=\"control\" type=\"radio\" [value]= \"data.value\">\r\n            <label class=\"govuk-label govuk-radios__label\" for=\"{{control + data.value}}\">\r\n                {{data.text}}\r\n            </label>\r\n            <ul *ngIf=\"data.list\" [class]=\"'govuk-list' + data.list.classes\">\r\n              <li *ngFor=\"let item of data.list.text\">{{ item }}</li>\r\n            </ul>\r\n            <app-hint *ngIf=\"data.hint\" [classes]=\"data.hint.classes\">\r\n                {{data.hint.text}}\r\n            </app-hint>\r\n        </div>\r\n        <div class=\"govuk-form-group\">\r\n            <div *ngIf=\"data.groups && group.value[control]===data.value\" class=\"govuk-radios__conditional\">\r\n                <ng-container *ngFor=\"let subgroup of data.groups\">\r\n                    <app-fieldset *ngIf=\"subgroup.fieldset\"\r\n                                  [classes]=\"'govuk-fieldset'\"\r\n                                  [group]=\"group\"\r\n                                  [data]=\"subgroup.fieldset\"\r\n                                  [validate]=\"validate\"\r\n                                  >\r\n                    </app-fieldset>\r\n                    <app-jui-form-elements [validate]=\"validate\" [group]=\"group\" [data]=\"subgroup\"></app-jui-form-elements>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n      </ng-container>\r\n  </div>\r\n</ng-container>\r\n`\r\n})\r\nexport class RadiobuttonComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() idPrefix = 'rb';\r\n    @Input() name = 'rb';\r\n    @Input() items;\r\n    @Input() classes;\r\n    @Input() control;\r\n    @Input() validate;\r\n    @Input() showValidation;\r\n    @Input() validationError;\r\n\r\n    constructor() { }\r\n\r\n}\r\n","import {Component, ElementRef, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-checkbox',\r\n    template: `<ng-container>\r\n    <div  *ngIf=\"group\" class=\"govuk-checkboxes__item\" [formGroup]=\"group\">\r\n        <input class=\"govuk-checkboxes__input\" [formControlName]=\"items.control\" id=\"{{items.control}}\" type=\"checkbox\" [value]=\"items.value\">\r\n        <app-label [class]=\"labelClasses\" [forElement]=\"items.control\">{{items.text}}</app-label>\r\n    </div>\r\n    <ng-content></ng-content>\r\n</ng-container>\r\n`\r\n})\r\nexport class CheckboxComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() idPrefix;\r\n    @Input() name;\r\n    @Input() items;\r\n    @Input() classes;\r\n    @Input() labelClasses;\r\n    @Input() validate;\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-textareas',\r\n  template: `<ng-container [formGroup]=\"group\">\r\n  <app-label\r\n             [forElement]=\"labelFor\">{{label.text}}\r\n  </app-label>\r\n  <ng-container *ngIf=\"validationError\">\r\n    <app-validation-error-formcontrol *ngIf=\"showValidation\" [group]=\"group\" [controlId]=\"control\" id=\"{{control}}\">{{validationError.value}}</app-validation-error-formcontrol>\r\n  </ng-container>\r\n  <textarea [class]=\"classes\"\r\n            [ngClass]=\"{'govuk-textarea--error':isControlInvalidAndShowValidation(group, control, showValidation) || isGroupInvalidAndShowValidation(group, showValidation)}\"\r\n            [rows]=\"rows\"\r\n            [id]=\"labelFor\"\r\n            [attr.aria-label]=\"labelFor\"\r\n            [formControlName]=\"control\"></textarea>\r\n</ng-container>\r\n`\r\n})\r\n/**\r\n * TextareasComponent\r\n *\r\n * Features:\r\n * If this component is told to show it's validation, and the input the user has entered is invalid,\r\n * then we should display a red box around the text area.\r\n */\r\nexport class TextareasComponent {\r\n  @Input() group: FormGroup;\r\n  @Input() idPrefix = 'ta';\r\n  @Input() name = 'ta';\r\n  @Input() id = 'ta';\r\n  @Input() labelFor;\r\n  @Input() rows;\r\n  @Input() classes;\r\n  @Input() control;\r\n  @Input() showValidation;\r\n  @Input() label;\r\n  @Input() items;\r\n  @Input() validationError;\r\n\r\n  constructor(private validationService: ValidationService) {\r\n  }\r\n\r\n  isGroupInvalidAndShowValidation (formGroup: FormGroup, showValidation: boolean) {\r\n\r\n    if(formGroup.errors && formGroup.errors[this.control] && showValidation) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  /**\r\n   * showValidationAndIsControlValid\r\n   *\r\n   * Return true if this component is required to show it's validation, and the users input is invalid.\r\n   *\r\n   * // @param showValidation\r\n   * // @param formGroup\r\n   * // @param control\r\n   * //@return {boolean}\r\n   */\r\n  isControlInvalidAndShowValidation(formGroup: FormGroup, control: string, showValidation: boolean) {\r\n\r\n\r\n    return !this.isFormControlValid(formGroup, control) && showValidation;\r\n  }\r\n\r\n  /**\r\n   * Checks if this control is valid.\r\n   *\r\n   * @see ValidationService\r\n   */\r\n  isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n    return this.validationService.isFormControlValid(formGroup, control);\r\n  }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-buttons',\r\n  template: `<ng-container *ngIf=\"group\" [formGroup]=\"group\">\r\n    <input id=\"{{control + value}}\" [class]=\"classes\" [type]=\"typeBtn\" [formControlName]=\"control\" [value]=\"value\">\r\n</ng-container>\r\n`\r\n})\r\nexport class ButtonsComponent implements OnInit {\r\n    @Input() idPrefix = 'btn';\r\n    @Input() name = 'btn';\r\n    @Input() group: FormGroup;\r\n    @Input() classes;\r\n    @Input() typeBtn;\r\n    @Input() control;\r\n    @Input() value;\r\n\r\n    constructor() {\r\n    }\r\n    isValid: boolean;\r\n    ngOnInit(): void {\r\n\r\n      this.isValid = this.group.status === 'INVALID';\r\n      this.group.valueChanges.subscribe(value => {\r\n        this.isValid = this.group.status === 'INVALID';\r\n      });\r\n\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-label',\r\n  template: `<label [attr.for]=\"forElement\"><ng-content></ng-content></label>\r\n`\r\n})\r\nexport class LabelComponent {\r\n  @Input() forElement;\r\n\r\n  constructor() {}\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n  selector: 'app-hidden-input',\r\n  template: `<ng-container\r\n  [formGroup]=\"group\">\r\n    <input\r\n           [ngClass]=\"componentClasses\"\r\n           [formControlName]=\"item.control\"\r\n           [id]=\"item.control\"\r\n           [name]=\"item.control\"\r\n           [value]=\"value\"\r\n           type=\"hidden\">\r\n</ng-container>\r\n`\r\n})\r\nexport class HiddenInputComponent implements OnInit{\r\n    @Input() group: FormGroup;\r\n    @Input() item: {\r\n      control: string;\r\n      classes: Array<string>\r\n    };\r\n    @Input() value;\r\n    componentClasses: string;\r\n    constructor() {\r\n    }\r\n    ngOnInit(): void {\r\n      this.componentClasses = 'govuk-input' + this.item.classes;\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-header',\r\n    template: `<div class=\"govuk-error-summary\" aria-labelledby=\"error-summary-title\" role=\"alert\" tabindex=\"-1\"\r\n     data-module=\"error-summary\">\r\n  <h2 class=\"govuk-error-summary__title\" id=\"error-summary-title\">\r\n    There is a problem\r\n  </h2>\r\n  <div class=\"govuk-error-summary__body\">\r\n    <ul class=\"govuk-list govuk-error-summary__list\">\r\n      <li *ngFor=\"let validationHeaderErrorMessage of validationHeaderErrorMessages\">\r\n        <ng-container *ngIf=\"isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_CONTROL) &&\r\n                                        !isFormControlValid(formGroup, validationHeaderErrorMessage.controlId)\">\r\n          <a routerLink=\"./\" fragment=\"{{validationHeaderErrorMessage.href}}\">{{validationHeaderErrorMessage.text}}</a>\r\n        </ng-container>\r\n        <ng-container\r\n          *ngIf=\"isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_GROUP) &&\r\n                                isFormGroupInvalid(formGroup, validationHeaderErrorMessage.formGroupValidationErrorId)\">\r\n          <a routerLink=\"./\" fragment=\"{{validationHeaderErrorMessage.href}}\">{{validationHeaderErrorMessage.text}}</a>\r\n        </ng-container>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n`\r\n})\r\n/**\r\n * ValidationHeaderComponent\r\n *\r\n * If the control that this error message component links to is not valid we\r\n * show the Error Message, sent through from the parent component.\r\n */\r\nexport class ValidationHeaderComponent {\r\n    @Input() formGroup: FormGroup;\r\n    @Input() controlId;\r\n\r\n    // TODO : deprecate as not needed?\r\n    @Input() idPrefix = 'ta';\r\n    @Input() name = 'ta';\r\n\r\n    // TODO : Move to constants file.\r\n    FORM_CONTROL = 'formControl';\r\n    FORM_GROUP = 'formGroup';\r\n\r\n    /**\r\n     * Signature for validationHeaderControls to be used in a Unit Test is:\r\n     *\r\n     * [{\r\n     *  value: 'Enter what information is needed',\r\n     *  controlId: 'informationNeeded',\r\n     *  pageLink: '#linkToTextArea'\r\n     * },\r\n     * {\r\n     *  value: 'Select yes if you want to include an annotated version of the draft consent order',\r\n     *  controlId: 'includeAnnotatedVersionDraftConsOrder',\r\n     *  pageLink: '#linkToRadiobuttons'\r\n     *}];\r\n     */\r\n    @Input() validationHeaderErrorMessages;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Checks if this control is valid.\r\n     *\r\n     * // @see ValidationService\r\n     * // @param control - 'informationNeeded'\r\n     */\r\n    isFormControlValid(formGroup: FormGroup, control: string): boolean {\r\n\r\n        return this.validationService.isFormControlValid(formGroup, control);\r\n    }\r\n\r\n    /**\r\n     * isFormGroupInvalid\r\n     *\r\n     * // @param formGroup\r\n     * // @param validationErrorId\r\n     * // @return {boolean}\r\n     */\r\n    isFormGroupInvalid(formGroup: FormGroup, validationErrorId: string): boolean {\r\n\r\n        return this.validationService.isFormGroupInvalid(formGroup, validationErrorId);\r\n    }\r\n\r\n    /**\r\n     * Checks if we should show a validation message for a form control, or the\r\n     * form group.\r\n     *\r\n     * // @param {string} validationLevel - validation level can either be formGroup or formControl.\r\n     * A formGroup level is validation that handles multiply form controls, when validating multiply components\r\n     * at the same time, ie. when you wish to see if a checkbox is checked, from multiply checkboxes, you must\r\n     * check this on a common ancestor of a set of controls. This common ancestor is always the Angular FormGroup.\r\n     * formControl level is validation that handles a single form control.\r\n     *\r\n     * This abstration was based on how Angular 6's FormGroup and FormControl are abstract from each other,\r\n     * after reading.\r\n     *\r\n     * // @param controlId\r\n     * // @return {boolean}\r\n     */\r\n    isValidationLevel(validationLevel: string, level: string): boolean {\r\n        return validationLevel === level;\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-error-formcontrol',\r\n    template: `<ng-container [formGroup]=\"group\" *ngIf=\"!isFormControlValid(group, controlId)\" >\r\n    <span id=\"{{controlId}}\" class=\"govuk-error-message\" >\r\n        <ng-content></ng-content>\r\n    </span>\r\n</ng-container>\r\n`\r\n})\r\n\r\n/**\r\n * ValidationErrorFormControlComponent\r\n *\r\n * We show an error message if the FormControl that this component links to via controlId is invalid.\r\n */\r\nexport class ValidationErrorFormControlComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() controlId;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Is Form Control Valid\r\n     *\r\n     * TODO: Unit\r\n     *\r\n     * // @see ValidationService\r\n     * // @param {FormGroup} formGroup\r\n     * // @param {string} controlId - ie. 'informationNeeded'\r\n     * // @return {boolean}\r\n     */\r\n    isFormControlValid(formGroup: FormGroup, controlId: string): boolean {\r\n        return this.validationService.isFormControlValid(formGroup, controlId);\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FormGroup} from '@angular/forms';\r\nimport {ValidationService} from '../../services/form-builder-validation.service';\r\n\r\n@Component({\r\n    selector: 'app-validation-error-formgroup',\r\n    template: `<ng-container [formGroup]=\"group\" *ngIf=\"isFormGroupInvalid(group, validationErrorId)\" >\r\n    <span id=\"{{validationErrorId}}\" class=\"govuk-error-message\">\r\n        <ng-content></ng-content>\r\n    </span>\r\n</ng-container>\r\n`\r\n})\r\n\r\n/**\r\n * Validation Error FormGroup Component\r\n *\r\n * We show an error message if the validation error associated with the FormGroup is thrown by the FormGroup.\r\n *\r\n * Note that we have validation on both FormGroup and FormControl level. FormControl level to validate single\r\n * controls, FormGroup level to validate multiply controls. This is the method suggested in the Angular 6 documents.\r\n *\r\n * An example of multiply controls, where we would leverage the FormGroup validation would be; checking if one\r\n * Checkbox is checked, out a set of multiply Checkboxes.\r\n *\r\n * // @see https://angular.io/guide/form-validation#adding-to-reactive-forms-1\r\n */\r\nexport class ValidationErrorFormGroupComponent {\r\n    @Input() group: FormGroup;\r\n    @Input() validationErrorId;\r\n\r\n    constructor(private validationService: ValidationService) {\r\n    }\r\n\r\n    /**\r\n     * Is Form Group Invalid\r\n     *\r\n     * TODO : Unit Test\r\n     *\r\n     * // @see ValidationService\r\n     * // @param {FormGroup} formGroup\r\n     * // @param {string} validationErrorId - ie. 'reasonsConstentOrderNotApproved' - This is the validation identifier\r\n     * we assign to a group of form controls, we assign this when we currently setValidators(), note that we will\r\n     * need to pass this in once the Universal Form Builder is merged with Validation.\r\n     * // @return {boolean}\r\n     */\r\n    isFormGroupInvalid(formGroup: FormGroup, validationErrorId: string): boolean {\r\n        return this.validationService.isFormGroupInvalid(formGroup, validationErrorId);\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {CommonModule, DatePipe} from '@angular/common';\r\nimport {HmctsFormBuilderComponent} from './hmcts-form-builder.component';\r\nimport {FromBuilderComponent} from './components/form-builder/from-builder.component';\r\nimport {FieldsetComponent} from './components/fieldset/fieldset.component';\r\nimport {JuiFormElementsComponent} from './components/jui-form-elements/jui-form-elements.component';\r\nimport {LegendComponent} from './components/legend/legend.component';\r\nimport {HintComponent} from './components/hint/hint.component';\r\nimport {DateComponent} from './components/date/date.component';\r\nimport {InputsComponent} from './components/inputs/inputs.component';\r\nimport {RadiobuttonComponent} from './components/radiobutton/radiobutton.component';\r\nimport {CheckboxComponent} from './components/checkbox/checkbox.component';\r\nimport {TextareasComponent} from './components/textareas/textareas.component';\r\nimport {ButtonsComponent} from './components/buttons/buttons.component';\r\nimport {LabelComponent} from './components/label/label.component';\r\nimport {HiddenInputComponent} from './components/hidden-input/hidden-input.component';\r\nimport {ValidationHeaderComponent} from './components/validation-header/validation-header.component';\r\nimport {ValidationErrorFormControlComponent} from './components/validation-error-formcontrol/validation-error-formcontrol.component';\r\nimport {ValidationErrorFormGroupComponent} from './components/validation-error-formgroup/validation-error-formgroup.component';\r\nimport {FormsService} from './services/form-builder.service';\r\nimport {ValidationService} from './services/form-builder-validation.service';\r\nimport {RouterModule} from '@angular/router';\r\n\r\n\r\nconst COMPONENTS = [\r\n  FromBuilderComponent,\r\n  FieldsetComponent,\r\n  ValidationErrorFormGroupComponent,\r\n  FromBuilderComponent,\r\n  FieldsetComponent,\r\n  JuiFormElementsComponent,\r\n  LegendComponent,\r\n  HintComponent,\r\n  DateComponent,\r\n  InputsComponent,\r\n  RadiobuttonComponent,\r\n  CheckboxComponent,\r\n  TextareasComponent,\r\n  ButtonsComponent,\r\n  LabelComponent,\r\n  HiddenInputComponent,\r\n  ValidationHeaderComponent,\r\n  ValidationErrorFormControlComponent,\r\n  HmctsFormBuilderComponent\r\n];\r\n\r\nconst SERVICES = [\r\n  FormsService,\r\n  ValidationService,\r\n  DatePipe\r\n]\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [...COMPONENTS],\r\n  exports: [...COMPONENTS],\r\n  providers: [\r\n    ...SERVICES\r\n  ]\r\n})\r\nexport class HmctsFormBuilderModule {\r\n}\r\n"]}