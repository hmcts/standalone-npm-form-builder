!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("@angular/forms"),require("@angular/common"),require("@angular/router")):"function"==typeof define&&define.amd?define("example-npm-module",["exports","@angular/core","@angular/forms","@angular/common","@angular/router"],n):n(t["example-npm-module"]={},t.ng.core,t.ng.forms,t.ng.common,t.ng.router)}(this,function(t,r,m,n,o){"use strict";var e=function(){function t(){}return t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=r.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),a=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:r.Component,args:[{selector:"hmcts-hmcts-form-builder",template:"\n    <p>\n      hmcts-form-builder works!\n    </p>\n  ",styles:[]}]}],t.ctorParameters=function(){return[]},t}();function V(t){var n="function"==typeof Symbol&&t[Symbol.iterator],r=0;return n?n.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}}function i(t,n){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var o,e,a=r.call(t),i=[];try{for(;(void 0===n||0<n--)&&!(o=a.next()).done;)i.push(o.value)}catch(l){e={error:l}}finally{try{o&&!o.done&&(r=a["return"])&&r.call(a)}finally{if(e)throw e.error}}return i}function l(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(i(arguments[n]));return t}var p=function(){function t(t){this.datePipe=t,this.ngValidatorFunctionMap=[{simpleName:"required",ngValidatorFunction:m.Validators.required},{simpleName:"email",ngValidatorFunction:m.Validators.email}]}return t.prototype.getNgValidationFunctionMap=function(){return this.ngValidatorFunctionMap},t.prototype.getNgValidators=function(t){var l=this,p=[];return t.forEach(function(t){try{for(var n=V(l.getNgValidationFunctionMap()),r=n.next();!r.done;r=n.next()){var o=r.value;o.simpleName===t&&p.push(o.ngValidatorFunction)}}catch(i){e={error:i}}finally{try{r&&!r.done&&(a=n["return"])&&a.call(n)}finally{if(e)throw e.error}}var e,a}),p},t.prototype.controlHasValidation=function(t){return t&&0<t.length},t.prototype.isFormControlValid=function(t,n){return t.get(n).valid},t.prototype.isFormGroupInvalid=function(t,n){return t.errors&&t.errors.hasOwnProperty(n)?t.errors[n]:null},t.prototype.isAnyCheckboxChecked=function(t,p,u){return function(t){try{for(var n=V(p),r=n.next();!r.done;r=n.next()){var o=r.value;if(!0===t.get(o).value)return null}}catch(l){e={error:l}}finally{try{r&&!r.done&&(a=n["return"])&&a.call(n)}finally{if(e)throw e.error}}return(i={})[u]=!0,i;var e,a,i}},t.prototype.isAllFieldsRequiredValidationFn=function(t,n,r){if(null!==t&&null!==n)try{for(var o=V(n),e=o.next();!e.done;e=o.next()){var a=e.value;if(!t.get(a).value)return(p={})[r]=!0,p}}catch(u){i={error:u}}finally{try{e&&!e.done&&(l=o["return"])&&l.call(o)}finally{if(i)throw i.error}}return null;var i,l,p},t.prototype.isAllFieldsRequired=function(t,n,r){var o=this;return function(t){return o.isAllFieldsRequiredValidationFn(t,n,r)}},t.prototype.isValidDateValidationFn=function(t,n,r){if(null!==t&&null!==n){var o=[];try{for(var e=V(n),a=e.next();!a.done;a=e.next()){var i=a.value;if(!t.get(i).value)return(g={})[r]=!0,g;if(t.get(i).value.length<=2)o.push(t.get(i).value);else{if(4!==t.get(i).value.length)return(f={})[r]=!0,f;o.push(t.get(i).value)}if(3===o.length){try{for(var l=V(o),p=l.next();!p.done;p=l.next()){var u=p.value;if(u!=Number(u))return(y={})[r]=!0,y}}catch(C){m={error:C}}finally{try{p&&!p.done&&(v=l["return"])&&v.call(l)}finally{if(m)throw m.error}}if(o[1]=Number(o[1]),o[2]=Number(o[2]),o[1]<=0||12<=o[1])return(h={})[r]=!0,h;if(o[2]<=0||31<=o[2])return(I={})[r]=!0,I;o[1]<10&&(o[1]="0"+o[1].toString().slice(-2)),o[2]<10&&(o[2]="0"+o[2].toString().slice(-2));var s=o.toString();return new Date(s).toISOString().slice(0,10).replace(/-/g,",").replace("T"," ")===s?null:((b={})[r]=!0,b)}}}catch(F){d={error:F}}finally{try{a&&!a.done&&(c=e["return"])&&c.call(e)}finally{if(d)throw d.error}}}return null;var d,c,g,f,m,v,y,h,I,b},t.prototype.isValidDate=function(t,n,r){var o=this;return function(t){return o.isValidDateValidationFn(t,n,r)}},t.prototype.isTextAreaValidWhenCheckboxChecked=function(t,r,o){return function(t){return t.get(r.checkboxControl).value?t.get(r.textareaControl).value&&0<t.get(r.textareaControl).value.length?null:((n={})[o]=!0,n):null;var n}},t.prototype.isRadioValidWhenSomeOptionSelected=function(p,u,s){var d=this;return function(t){try{for(var n=V(u.selectedOptions),r=n.next();!r.done;r=n.next()){var o=r.value;if(null!==t.get(u.radioControl).value&&t.get(u.radioControl).value!==o.selectedOption)return o.childValidator.validatorFunc?d[o.childValidator.validatorFunc+"ValidationFn"](null,null,o.childValidator.validationErrorId):null;if(o.childValidator.validatorFunc)return d[o.childValidator.validatorFunc+"ValidationFn"](p,o.childValidator.controls,o.childValidator.validationErrorId)}}catch(l){e={error:l}}finally{try{r&&!r.done&&(a=n["return"])&&a.call(n)}finally{if(e)throw e.error}}return(i={})[s]=!0,i;var e,a,i}},t.prototype.createFormGroupValidators=function(r,t){var o=this;return t.map(function(t){var n=t;return o.createFormGroupValidator(r,n.validatorFunc,n.controls,n.validationErrorId)})},t.prototype.createFormGroupValidator=function(t,n,r,o){return this[n](t,r,o)},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:n.DatePipe}]},t.ngInjectableDef=r.defineInjectable({factory:function(){return new t(r.inject(n.DatePipe))},token:t,providedIn:"root"}),t}(),u=function(){function t(t){this.validationService=t,this.FormControls=[]}return t.prototype.create=function(t,n){if("object"==typeof t)for(var r in t){if("control"===r)if(t.radioGroup!==undefined)if(0!==Object.keys(n).length)try{for(var o=V(t.radioGroup),e=o.next();!e.done;e=o.next()){var a=e.value;if(a.value===n[t.control]){this.FormControls[t.control]=new m.FormControl(a.value);break}this.createFormControl(null,t.control,t.validators)}}catch(g){u={error:g}}finally{try{e&&!e.done&&(s=o["return"])&&s.call(o)}finally{if(u)throw u.error}}else this.FormControls[t.control]=new m.FormControl;else n[t.control]?this.FormControls[t.control]=new m.FormControl(n[t.control]):this.createFormControl(t.value,t.control,t.validators);this.create(t[r],n)}if(t!==undefined&&t.isArray)try{for(var i=V(t),l=i.next();!l.done;l=i.next()){var p=l.value;this.create(t[p],n)}}catch(f){d={error:f}}finally{try{l&&!l.done&&(c=i["return"])&&c.call(i)}finally{if(d)throw d.error}}var u,s,d,c},t.prototype.createFormControl=function(t,n,r){this.validationService.controlHasValidation(r)?this.FormControls[n]=new m.FormControl(t,this.validationService.getNgValidators(r)):this.FormControls[n]=new m.FormControl(t)},t.prototype.defineformControls=function(t,n){return this.FormControls=[],this.create(t,n),this.FormControls},t.decorators=[{type:r.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:p}]},t.ngInjectableDef=r.defineInjectable({factory:function(){return new t(r.inject(p))},token:t,providedIn:"root"}),t}(),s=function(){function t(t,n){this.formsService=t,this.validationService=n,this.submitPage=new r.EventEmitter}return t.prototype.ngOnChanges=function(t){t.pageItems&&t.pageItems.currentValue&&this.createForm()},t.prototype.createForm=function(){this.formDraft=new m.FormGroup(this.formsService.defineformControls(this.pageItems,this.pageValues)),this.setValidators()},t.prototype.setValidators=function(){if(this.pageItems){var t=this.validationService.createFormGroupValidators(this.formDraft,this.pageItems.formGroupValidators);this.formDraft.setValidators(t)}},t.prototype.onFormSubmit=function(){this.submitPage.emit(this.formDraft)},t.decorators=[{type:r.Component,args:[{selector:"app-form-builder",template:'<ng-container *ngIf="isPageValid && formDraft.invalid">\n  <app-validation-header [validationHeaderErrorMessages]="this.pageItems.validationHeaderErrorMessages" [formGroup]="formDraft">\n  </app-validation-header>\n</ng-container>\n\n<form *ngIf="pageItems" [formGroup]="formDraft" (ngSubmit)="onFormSubmit()">\n  <div [ngClass]="{\'govuk-form-group\':true, \'govuk-form-group--error\' : isPageValid && formDraft.invalid }">\n    <h1 class="govuk-heading-xl">\n      <span *ngIf="pageItems.caption" [class]="pageItems.caption.classes">{{ pageItems.caption.text }}</span>\n      {{pageItems.header}}\n    </h1>\n    <div class="govuk-form-group" *ngFor="let group of pageItems.groups">\n      <app-fieldset *ngIf="group.fieldset"\n                    [classes]="\'govuk-fieldset\'"\n                    [group]="formDraft"\n                    [data]="group.fieldset"\n                    [validate]="isPageValid">\n      </app-fieldset>\n      <app-jui-form-elements [group]="formDraft" [validate]="isPageValid" [data]="group"></app-jui-form-elements>\n    </div>\n  </div>\n</form>\n'}]}],t.ctorParameters=function(){return[{type:u},{type:p}]},t.propDecorators={pageItems:[{type:r.Input}],pageValues:[{type:r.Input}],isPageValid:[{type:r.Input}],submitPage:[{type:r.Output}]},t}(),d=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-fieldset",template:'<fieldset [attr.validate]="validate" [class]="classes" [attr.data]="data" [attr.group]="group">\n    <ng-container *ngFor="let item of data">\n        <app-jui-form-elements [validate]="validate" [group]="group" [data]="item"></app-jui-form-elements>\n    </ng-container>\n    <ng-content></ng-content>\n</fieldset>\n'}]}],t.propDecorators={classes:[{type:r.Input}],validate:[{type:r.Input}],group:[{type:r.Input}],data:[{type:r.Input}]},t}(),c=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-jui-form-elements",template:'<div [attr.validate]="validate" [attr.data]="data" [attr.group]="group">\n  \x3c!--JUI FORM builder component --\x3e\n  <app-legend *ngIf="data.legend" [classes]="data.legend.classes">\n    {{data.legend.text}}\n  </app-legend>\n  <app-hint *ngIf="data.hint" [classes]="data.hint.classes">\n    {{data.hint.text}}\n  </app-hint>\n  <ng-container *ngIf="data.validationError && validate">\n    <app-validation-error-formgroup [group]="group" [validationErrorId]="data.validationError.identifier">\n      {{data.validationError.value}}\n    </app-validation-error-formgroup>\n  </ng-container>\n  <app-date *ngIf="data.date"\n            [id]="data.date.formName"\n            [data]="data.date"\n            [group]="group"\n            [validate]="validate"\n            [validationError]="data.date.validationError">\n  </app-date>\n  <app-inputs *ngIf="data.input"\n              [item]="data.input"\n              [showValidation]="validate"\n              [validationError]="data.input.validationError"\n              [group]="group"\n              [hint]="data.input.hint"\n              [label]="data.input.label"\n              [labelFor]="data.input.control"></app-inputs>\n  <app-radiobutton *ngIf="data.radios" [classes]="\'govuk-radios \' + data.radios.classes"\n                   [items]="data.radios.radioGroup"\n                   [group]="group"\n                   [control]="data.radios.control"\n                   [idPrefix]="data.radios.control"\n                   [validate]="validate"\n                   [showValidation]="validate"\n                   [validationError]="data.radios.validationError">\n  </app-radiobutton>\n  <div *ngIf="data.checkbox" class="govuk-checkboxes">\n    <app-checkbox [group]="group"\n                  [validate]="validate"\n                  [idPrefix]="data.checkbox.control"\n                  [items]="data.checkbox"\n                  [classes]="\'govuk-checkboxes__item\'"\n                  [labelClasses]="\'govuk-label govuk-checkboxes__label\'">\n      <div class="govuk-form-group">\n        <div *ngIf="data.checkbox.groups && group.controls[data.checkbox.control].value" class="govuk-checkboxes__conditional"\n             [ngStyle] = "{ \'border-left\': (validate && group.invalid) ? \'5px solid #b10e1e\' : \'\' }">\n          <ng-container  *ngFor="let subgroup of data.checkbox.groups">\n            <app-fieldset *ngIf="subgroup.fieldset"\n                          [validate]="validate"\n                          [classes]="\'govuk-fieldset\'"\n                          [group]="group"\n                          [data]="subgroup.fieldset"\n            >\n            </app-fieldset>\n            <app-jui-form-elements [validate]="validate" [group]="group" [data]="subgroup"></app-jui-form-elements>\n          </ng-container>\n        </div>\n      </div>\n    </app-checkbox>\n  </div>\n\n  <app-textareas *ngIf="data.textarea" [classes]="\'govuk-textarea\'"\n                 [showValidation]="validate"\n                 [validationError]="data.textarea.validationError"\n                 [group]="group"\n                 [control]="data.textarea.control"\n                 [label]="data.textarea.label"\n                 [labelFor]="data.textarea.control"\n                 [rows]="5">\n  </app-textareas>\n  <app-buttons *ngIf="data.button"\n               [classes]="\'govuk-button\'"\n               [typeBtn]="data.button.type"\n               [group]="group"\n               [control]="data.button.control"\n               [value]="data.button.value">\n  </app-buttons>\n  \x3c!--JUI FORM builder component --\x3e\n</div>\n'}]}],t.propDecorators={group:[{type:r.Input}],data:[{type:r.Input}],validate:[{type:r.Input}]},t}(),g=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-legend",template:"<legend [class]=\"'govuk-fieldset__legend ' + classes\">\n    <ng-content></ng-content>\n</legend>\n"}]}],t.propDecorators={classes:[{type:r.Input}]},t}(),f=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-hint",template:'<span [class]="classes">\n    <ng-content></ng-content>\n</span>\n',styles:[""]}]}],t.propDecorators={classes:[{type:r.Input}]},t}(),v=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-date",template:'<ng-container>\n    <app-validation-error-formgroup *ngIf="data.validationError && validate" [group]="group" [validationErrorId]="data.validationError.identifier">\n        {{data.validationError.value}}\n    </app-validation-error-formgroup>\n    <div class="govuk-date-input" [id]="id" [attr.data]="data">\n        <div class="govuk-date-input__item">\n            <div class="govuk-form-group">\n                <app-inputs [item]="data.day.input"\n                            [group]="group"\n                            [label]="data.day.input.label"\n                            [labelFor]="data.day.input.control"\n                            [showValidation]=""></app-inputs>\n            </div>\n        </div>\n        <div class="govuk-date-input__item">\n            <div class="govuk-form-group">\n                <app-inputs [item]="data.month.input"\n                            [group]="group"\n                            [label]="data.month.input.label"\n                            [labelFor]="data.month.input.control"\n                            [showValidation]=""></app-inputs>\n            </div>\n        </div>\n        <div class="govuk-date-input__item">\n            <div class="govuk-form-group">\n                <app-inputs [item]="data.year.input"\n                            [group]="group"\n                            [label]="data.year.input.label"\n                            [labelFor]="data.year.input.control"\n                            [showValidation]=""></app-inputs>\n            </div>\n        </div>\n    </div>\n</ng-container>\n'}]}],t.propDecorators={group:[{type:r.Input}],id:[{type:r.Input}],data:[{type:r.Input}],validate:[{type:r.Input}],showValidation:[{type:r.Input}],validationError:[{type:r.Input}]},t}(),y=function(){function t(t){this.validationService=t}return t.prototype.isControlInvalidAndShowValidation=function(t,n,r){return!this.isFormControlValid(t,n)&&r},t.prototype.isFormControlValid=function(t,n){return this.validationService.isFormControlValid(t,n)},t.decorators=[{type:r.Component,args:[{selector:"app-inputs",template:'<ng-container [formGroup]="group">\n  <app-label [forElement]="labelFor">{{label.text}}\n  </app-label>\n  <app-hint *ngIf="hint" [classes]="hint.classes">\n    {{hint.text}}\n  </app-hint>\n  <ng-container *ngIf="validationError">\n    <app-validation-error-formcontrol *ngIf="showValidation" [group]="group" [controlId]="item.control" id="{{item.control}}">{{validationError.value}}</app-validation-error-formcontrol>\n  </ng-container>\n  <input [class]="\'govuk-input \' + item.classes"\n         [formControlName]="item.control"\n         [id]="item.control"\n         [name]="item.control"\n         [ngClass]="{\'govuk-input--error\':isControlInvalidAndShowValidation(group, item.control, showValidation)}"\n         type="text">\n</ng-container>\n'}]}],t.ctorParameters=function(){return[{type:p}]},t.propDecorators={group:[{type:r.Input}],item:[{type:r.Input}],label:[{type:r.Input}],hint:[{type:r.Input}],labelFor:[{type:r.Input}],showValidation:[{type:r.Input}],validationError:[{type:r.Input}]},t}(),h=function(){function t(){this.idPrefix="rb",this.name="rb"}return t.decorators=[{type:r.Component,args:[{selector:"app-radiobutton",template:'<ng-container>\n  <ng-container *ngIf="validationError">\n      <app-validation-error-formcontrol *ngIf="showValidation" [group]="group" [controlId]="control">{{validationError.value}}</app-validation-error-formcontrol>\n  </ng-container>\n  <div [class]="classes" [formGroup]="group">\n      <ng-container *ngFor="let data of items; let i = index">\n        <div *ngIf="data.devider" class="govuk-radios__divider">{{data.devider}}</div>\n        <div *ngIf="!data.devider" class="govuk-radios__item">\n            <input class="govuk-radios__input" id="{{control + data.value}}" [formControlName]="control" type="radio" [value]= "data.value">\n            <label class="govuk-label govuk-radios__label" for="{{control + data.value}}">\n                {{data.text}}\n            </label>\n            <ul *ngIf="data.list" [class]="\'govuk-list\' + data.list.classes">\n              <li *ngFor="let item of data.list.text">{{ item }}</li>\n            </ul>\n            <app-hint *ngIf="data.hint" [classes]="data.hint.classes">\n                {{data.hint.text}}\n            </app-hint>\n        </div>\n        <div class="govuk-form-group">\n            <div *ngIf="data.groups && group.value[control]===data.value" class="govuk-radios__conditional">\n                <ng-container *ngFor="let subgroup of data.groups">\n                    <app-fieldset *ngIf="subgroup.fieldset"\n                                  [classes]="\'govuk-fieldset\'"\n                                  [group]="group"\n                                  [data]="subgroup.fieldset"\n                                  [validate]="validate"\n                                  >\n                    </app-fieldset>\n                    <app-jui-form-elements [validate]="validate" [group]="group" [data]="subgroup"></app-jui-form-elements>\n                </ng-container>\n            </div>\n        </div>\n      </ng-container>\n  </div>\n</ng-container>\n'}]}],t.ctorParameters=function(){return[]},t.propDecorators={group:[{type:r.Input}],idPrefix:[{type:r.Input}],name:[{type:r.Input}],items:[{type:r.Input}],classes:[{type:r.Input}],control:[{type:r.Input}],validate:[{type:r.Input}],showValidation:[{type:r.Input}],validationError:[{type:r.Input}]},t}(),I=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-checkbox",template:'<ng-container>\n    <div  *ngIf="group" class="govuk-checkboxes__item" [formGroup]="group">\n        <input class="govuk-checkboxes__input" [formControlName]="items.control" id="{{items.control}}" type="checkbox" [value]="items.value">\n        <app-label [class]="labelClasses" [forElement]="items.control">{{items.text}}</app-label>\n    </div>\n    <ng-content></ng-content>\n</ng-container>\n'}]}],t.ctorParameters=function(){return[]},t.propDecorators={group:[{type:r.Input}],idPrefix:[{type:r.Input}],name:[{type:r.Input}],items:[{type:r.Input}],classes:[{type:r.Input}],labelClasses:[{type:r.Input}],validate:[{type:r.Input}]},t}(),b=function(){function t(t){this.validationService=t,this.idPrefix="ta",this.name="ta",this.id="ta"}return t.prototype.isGroupInvalidAndShowValidation=function(t,n){return!!(t.errors&&t.errors[this.control]&&n)},t.prototype.isControlInvalidAndShowValidation=function(t,n,r){return!this.isFormControlValid(t,n)&&r},t.prototype.isFormControlValid=function(t,n){return this.validationService.isFormControlValid(t,n)},t.decorators=[{type:r.Component,args:[{selector:"app-textareas",template:'<ng-container [formGroup]="group">\n  <app-label\n             [forElement]="labelFor">{{label.text}}\n  </app-label>\n  <ng-container *ngIf="validationError">\n    <app-validation-error-formcontrol *ngIf="showValidation" [group]="group" [controlId]="control" id="{{control}}">{{validationError.value}}</app-validation-error-formcontrol>\n  </ng-container>\n  <textarea [class]="classes"\n            [ngClass]="{\'govuk-textarea--error\':isControlInvalidAndShowValidation(group, control, showValidation) || isGroupInvalidAndShowValidation(group, showValidation)}"\n            [rows]="rows"\n            [id]="labelFor"\n            [attr.aria-label]="labelFor"\n            [formControlName]="control"></textarea>\n</ng-container>\n'}]}],t.ctorParameters=function(){return[{type:p}]},t.propDecorators={group:[{type:r.Input}],idPrefix:[{type:r.Input}],name:[{type:r.Input}],id:[{type:r.Input}],labelFor:[{type:r.Input}],rows:[{type:r.Input}],classes:[{type:r.Input}],control:[{type:r.Input}],showValidation:[{type:r.Input}],label:[{type:r.Input}],items:[{type:r.Input}],validationError:[{type:r.Input}]},t}(),C=function(){function t(){this.idPrefix="btn",this.name="btn"}return t.prototype.ngOnInit=function(){var n=this;this.isValid="INVALID"===this.group.status,this.group.valueChanges.subscribe(function(t){n.isValid="INVALID"===n.group.status})},t.decorators=[{type:r.Component,args:[{selector:"app-buttons",template:'<ng-container *ngIf="group" [formGroup]="group">\n    <input id="{{control + value}}" [class]="classes" [type]="typeBtn" [formControlName]="control" [value]="value">\n</ng-container>\n'}]}],t.ctorParameters=function(){return[]},t.propDecorators={idPrefix:[{type:r.Input}],name:[{type:r.Input}],group:[{type:r.Input}],classes:[{type:r.Input}],typeBtn:[{type:r.Input}],control:[{type:r.Input}],value:[{type:r.Input}]},t}(),F=function(){function t(){}return t.decorators=[{type:r.Component,args:[{selector:"app-label",template:'<label [attr.for]="forElement"><ng-content></ng-content></label>\n'}]}],t.ctorParameters=function(){return[]},t.propDecorators={forElement:[{type:r.Input}]},t}(),x=function(){function t(){}return t.prototype.ngOnInit=function(){this.componentClasses="govuk-input"+this.item.classes},t.decorators=[{type:r.Component,args:[{selector:"app-hidden-input",template:'<ng-container\n  [formGroup]="group">\n    <input\n           [ngClass]="componentClasses"\n           [formControlName]="item.control"\n           [id]="item.control"\n           [name]="item.control"\n           [value]="value"\n           type="hidden">\n</ng-container>\n'}]}],t.ctorParameters=function(){return[]},t.propDecorators={group:[{type:r.Input}],item:[{type:r.Input}],value:[{type:r.Input}]},t}(),k=function(){function t(t){this.validationService=t,this.idPrefix="ta",this.name="ta",this.FORM_CONTROL="formControl",this.FORM_GROUP="formGroup"}return t.prototype.isFormControlValid=function(t,n){return this.validationService.isFormControlValid(t,n)},t.prototype.isFormGroupInvalid=function(t,n){return this.validationService.isFormGroupInvalid(t,n)},t.prototype.isValidationLevel=function(t,n){return t===n},t.decorators=[{type:r.Component,args:[{selector:"app-validation-header",template:'<div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1"\n     data-module="error-summary">\n  <h2 class="govuk-error-summary__title" id="error-summary-title">\n    There is a problem\n  </h2>\n  <div class="govuk-error-summary__body">\n    <ul class="govuk-list govuk-error-summary__list">\n      <li *ngFor="let validationHeaderErrorMessage of validationHeaderErrorMessages">\n        <ng-container *ngIf="isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_CONTROL) &&\n                                        !isFormControlValid(formGroup, validationHeaderErrorMessage.controlId)">\n          <a routerLink="./" fragment="{{validationHeaderErrorMessage.href}}">{{validationHeaderErrorMessage.text}}</a>\n        </ng-container>\n        <ng-container\n          *ngIf="isValidationLevel(validationHeaderErrorMessage.validationLevel, FORM_GROUP) &&\n                                isFormGroupInvalid(formGroup, validationHeaderErrorMessage.formGroupValidationErrorId)">\n          <a routerLink="./" fragment="{{validationHeaderErrorMessage.href}}">{{validationHeaderErrorMessage.text}}</a>\n        </ng-container>\n      </li>\n    </ul>\n  </div>\n</div>\n'}]}],t.ctorParameters=function(){return[{type:p}]},t.propDecorators={formGroup:[{type:r.Input}],controlId:[{type:r.Input}],idPrefix:[{type:r.Input}],name:[{type:r.Input}],validationHeaderErrorMessages:[{type:r.Input}]},t}(),E=function(){function t(t){this.validationService=t}return t.prototype.isFormControlValid=function(t,n){return this.validationService.isFormControlValid(t,n)},t.decorators=[{type:r.Component,args:[{selector:"app-validation-error-formcontrol",template:'<ng-container [formGroup]="group" *ngIf="!isFormControlValid(group, controlId)" >\n    <span id="{{controlId}}" class="govuk-error-message" >\n        <ng-content></ng-content>\n    </span>\n</ng-container>\n'}]}],t.ctorParameters=function(){return[{type:p}]},t.propDecorators={group:[{type:r.Input}],controlId:[{type:r.Input}]},t}(),w=function(){function t(t){this.validationService=t}return t.prototype.isFormGroupInvalid=function(t,n){return this.validationService.isFormGroupInvalid(t,n)},t.decorators=[{type:r.Component,args:[{selector:"app-validation-error-formgroup",template:'<ng-container [formGroup]="group" *ngIf="isFormGroupInvalid(group, validationErrorId)" >\n    <span id="{{validationErrorId}}" class="govuk-error-message">\n        <ng-content></ng-content>\n    </span>\n</ng-container>\n'}]}],t.ctorParameters=function(){return[{type:p}]},t.propDecorators={group:[{type:r.Input}],validationErrorId:[{type:r.Input}]},t}(),P=[s,d,w,s,d,c,g,f,v,y,h,I,b,C,F,x,k,E,a],S=[u,p,n.DatePipe],_=function(){function t(){}return t.decorators=[{type:r.NgModule,args:[{imports:[n.CommonModule,m.FormsModule,o.RouterModule,m.ReactiveFormsModule],declarations:l(P),exports:l(P),providers:l(S)}]}],t}();t.HmctsFormBuilderService=e,t.HmctsFormBuilderComponent=a,t.HmctsFormBuilderModule=_,t.FromBuilderComponent=s,t.FieldsetComponent=d,t.JuiFormElementsComponent=c,t.LegendComponent=g,t.HintComponent=f,t.DateComponent=v,t.InputsComponent=y,t.RadiobuttonComponent=h,t.CheckboxComponent=I,t.TextareasComponent=b,t.ButtonsComponent=C,t.LabelComponent=F,t.HiddenInputComponent=x,t.ValidationHeaderComponent=k,t.ValidationErrorFormControlComponent=E,t.ValidationErrorFormGroupComponent=w,t.FormsService=u,t.ValidationService=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=example-npm-module.umd.min.js.map